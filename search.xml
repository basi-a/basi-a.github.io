<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>买到了便宜的VPS, 那就玩玩Zerotier的Moon服务器吧</title>
      <link href="/2024/02/22/%E4%B9%B0%E5%88%B0%E4%BA%86%E4%BE%BF%E5%AE%9C%E7%9A%84VPS-%E9%82%A3%E5%B0%B1%E7%8E%A9%E7%8E%A9Zerotier%E7%9A%84Moon%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%A7/"/>
      <url>/2024/02/22/%E4%B9%B0%E5%88%B0%E4%BA%86%E4%BE%BF%E5%AE%9C%E7%9A%84VPS-%E9%82%A3%E5%B0%B1%E7%8E%A9%E7%8E%A9Zerotier%E7%9A%84Moon%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>今天买到了便宜的vps，虽然<code>2 vCPU 2 GiB 40 GiB RAID-10 HS SSD</code>, 看似不强，但是够我拿来做<code>Zerotier</code>的卫星服务器了，另外还可以拿来开<code>frps</code></p></blockquote><blockquote><p>Zerotier 三个等级：</p><p>PLANET 行星服务器，Zerotier 各地的根服务器，有日本、新加坡等地<br>MOON 卫星级服务器，用户自建的私有根服务器，起到中转加速的作用<br>LEAF 相当于各个枝叶，就是每台连接到该网络的机器节点。</p></blockquote><h1 id="全节点操作"><a href="#全节点操作" class="headerlink" title="全节点操作"></a>全节点操作</h1><p>以下操作只针对Linux, windows的有图形配置，很简单;</p><p><del>至于mac, 别问问就是，穷鬼买不起；</del></p><h2 id="安装zerotier-one"><a href="#安装zerotier-one" class="headerlink" title="安装zerotier-one"></a>安装zerotier-one</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.zerotier.com/ | sudo bash</span><br><span class="line"><span class="comment"># for Archlinux</span></span><br><span class="line"><span class="comment"># paru -S zerotier-one</span></span><br></pre></td></tr></table></figure><h2 id="启动并加入网络"><a href="#启动并加入网络" class="headerlink" title="启动并加入网络"></a>启动并加入网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> zerotier-one --now</span><br><span class="line">sudo zerotier-cli <span class="built_in">join</span> <span class="variable">$&#123;Network-ID&#125;</span></span><br></pre></td></tr></table></figure><p>之后管理面板找到<code>Members</code>对这些节点授权</p><h1 id="Moon节点"><a href="#Moon节点" class="headerlink" title="Moon节点"></a>Moon节点</h1><p>这个必须是个公网的服务器, 以下操作就都用root用户吧</p><h2 id="生成节点配置"><a href="#生成节点配置" class="headerlink" title="生成节点配置"></a>生成节点配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"><span class="built_in">cd</span> /var/lib/zerotier-one/</span><br><span class="line">zerotier-idtool initmoon /var/lib/zerotier-one/identity.public &gt; moon.json</span><br></pre></td></tr></table></figure><h2 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim moon.json</span><br></pre></td></tr></table></figure><p>修改这个{<code>&quot;roots&quot;: [&#123;&quot;stableEndpoints&quot;: [&quot;ip/port&quot;]&#125;]&#125;</code>，方括号里面写<code>&quot;公网IP/9993&quot;</code>, 配置文件结构就像我下面这张图</p><p><img src="https://cdn.basi-a.top/images/moon-set-stableEndpoints.png" alt="moon-set-stableEndpoints"></p><h2 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure><p>下面是我的输出</p><blockquote><p>wrote 000000844acc14c1.moon (signed world with timestamp 1708605206488)</p></blockquote><p>创建<code>moons.d</code>目录，把上面生成的挪进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> moons.d</span><br><span class="line"><span class="built_in">mv</span> 000000844acc14c1.moon moons.d</span><br></pre></td></tr></table></figure><h2 id="重启zerotier"><a href="#重启zerotier" class="headerlink" title="重启zerotier"></a>重启zerotier</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zerotier-one</span><br></pre></td></tr></table></figure><h1 id="非Moon节点"><a href="#非Moon节点" class="headerlink" title="非Moon节点"></a>非Moon节点</h1><h2 id="操作方法A"><a href="#操作方法A" class="headerlink" title="操作方法A"></a>操作方法A</h2><p>执行下面的脚本就可以获取<code>moon</code>信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=<span class="variable">$1</span></span><br><span class="line">ztaddr=$(sudo zerotier-cli listpeers | grep <span class="variable">$IP</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">sudo zerotier-cli orbit <span class="variable">$ztaddr</span> <span class="variable">$ztaddr</span></span><br></pre></td></tr></table></figure><p>其实重点就是<code>zerotier-cli listpeers</code>找到这玩意输出中作为Moon服务器的那行的IP，所对应的<code>&lt;ztaddr&gt;</code>列的值</p><p>然后<code>zerotier-cli orbit</code> 后面俩参数都是这个<code>&lt;ztaddr&gt;</code>列的值，这个过程很简单，windows我就不写脚本了，直接<code>powershell</code>（管理员模式哦）手操一下得了</p><p>上面操作，成功的话会输出这个</p><blockquote><p>200 orbit OK</p></blockquote><p>然后再看一眼<code>listpeers</code>，就会发现作为moon服务器的IP,对应的<code>&lt;role&gt;</code>就是<code>MOON</code>, <code>listmoons</code>会输出<code>moon</code>服务器的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zerotier-cli listpeers</span><br><span class="line">sudo zerotier-cli listmoons</span><br></pre></td></tr></table></figure><h2 id="操作方法B"><a href="#操作方法B" class="headerlink" title="操作方法B"></a>操作方法B</h2><p>拿着Moon节点生成的<code>/var/lib/zerotier-one/moons.d/000000844acc14c1.moon</code>，扔到非Moon节点的<code>/var/lib/zerotier-one/moons.d/</code>, 然后重启服务</p><p>当然我觉得这个方法不咋优雅</p>]]></content>
      
      
      
        <tags>
            
            <tag> Zerotier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Ansible解放搞k8s集群的双手</title>
      <link href="/2024/01/23/%E7%94%A8Ansible%E8%A7%A3%E6%94%BE%E6%90%9Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8F%8C%E6%89%8B/"/>
      <url>/2024/01/23/%E7%94%A8Ansible%E8%A7%A3%E6%94%BE%E6%90%9Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8F%8C%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>之前手装过k8s，这次想着尽可能自动化，但全自己手搓脚本有点累，而且有现成的我为啥还要重复造轮子呢（才不是嫌麻烦不想写了）。</p><p>于是呢，就有了下面这些东西，掏出了<code>Ansible</code>, 说实话，要不是之前面试我还真不知道有<code>playbook</code>这东西。</p></blockquote><h1 id="k8s初始环境"><a href="#k8s初始环境" class="headerlink" title="k8s初始环境"></a>k8s初始环境</h1><h2 id="基础环境列表"><a href="#基础环境列表" class="headerlink" title="基础环境列表"></a>基础环境列表</h2><p><code>hosts.k8s</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.122.10master</span><br><span class="line">192.168.122.11node01</span><br><span class="line">192.168.122.12node02</span><br><span class="line">192.168.122.13node03</span><br></pre></td></tr></table></figure><p>这些全都装的<code>ubuntu 22.04</code></p><h2 id="免密认证-同步hosts-设定主机名"><a href="#免密认证-同步hosts-设定主机名" class="headerlink" title="免密认证,同步hosts,设定主机名"></a>免密认证,同步hosts,设定主机名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span> -f ~/.ssh/id_rsa</span><br><span class="line"><span class="built_in">cat</span> hosts.k8s | sudo <span class="built_in">tee</span> -a /etc/hosts</span><br></pre></td></tr></table></figure><p>为了舒服，咱就别干撸shell了，上<code>ansible</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y sshpass ansible</span><br></pre></td></tr></table></figure><p>创建主机清单<code>inventory.ini</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">master ansible_host=master ansible_user=basi</span><br><span class="line">[nodes]</span><br><span class="line">node01 ansible_host=node01 ansible_user=basi</span><br><span class="line">node02 ansible_host=node02 ansible_user=basi</span><br><span class="line">node03 ansible_host=node03 ansible_user=basi</span><br></pre></td></tr></table></figure><p><code>palybook.yml</code>内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">authorized</span> <span class="string">key</span> <span class="string">taken</span> <span class="string">from</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">authorized_key:</span></span><br><span class="line">        <span class="attr">user:</span> <span class="string">basi</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; lookup(&#x27;file&#x27;, &#x27;~/.ssh/id_rsa.pub&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">the</span> <span class="string">hosts</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/hosts</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/hosts</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">hostname</span> <span class="string">from</span> <span class="string">the</span> <span class="string">hosts</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;awk &#x27;/<span class="template-variable">&#123;&#123; ansible_default_ipv4.address &#125;&#125;</span>/ &#123;print $2&#125;&#x27; /etc/hosts&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">new_hostname</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">the</span> <span class="string">hostname</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">hostname:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; new_hostname.stdout &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">Changed</span> <span class="string">hostname</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;cat /proc/sys/kernel/hostname&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Output</span> <span class="string">the</span> <span class="string">Changed</span> <span class="string">hostname</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">result.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini playbook.yml -k -K</span><br><span class="line"><span class="comment"># 先输入一下用户密码，再输入一下sudo密码，搞定</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/ansible-playbook.png" alt="ansible-playbook.png"></p><h1 id="安装contrainerd-通用设置"><a href="#安装contrainerd-通用设置" class="headerlink" title="安装contrainerd, 通用设置"></a>安装contrainerd, 通用设置</h1><h2 id="安装containerd"><a href="#安装containerd" class="headerlink" title="安装containerd"></a>安装containerd</h2><p>先手动下载一下<a href="https://github.com/containerd/containerd/releases/latest">安装包</a>，咱选<code>cri-containerd-cni</code>这个啥都有的, 看好架构哈, 我这个是当前的最新版本1.6.27</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c -v https://github.com/containerd/containerd/releases/download/v1.6.27/cri-containerd-cni-1.6.27-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p><code>containerd_playbook.yml</code> 内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">the</span> <span class="string">tarball</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/cri-containerd-cni-1.6.27-linux-amd64.tar.gz</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/opt/cri-containerd-cni-1.6.27-linux-amd64.tar.gz</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">cri-containerd-cni</span> <span class="string">with</span> <span class="string">tarball</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;tar -zxvf /opt/cri-containerd-cni-1.6.27-linux-amd64.tar.gz -C /&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Change</span> <span class="string">Cgroup</span> <span class="string">to</span> <span class="string">systemd</span> <span class="string">and</span> <span class="string">start</span> <span class="string">conatainerd</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span></span><br><span class="line">      <span class="attr">cmd:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      mkdir /etc/containerd</span></span><br><span class="line"><span class="string">      containerd config default | tee /etc/containerd/config.toml</span></span><br><span class="line"><span class="string">      sed -i &#x27;/\[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options\]/,/SystemdCgroup/ s/SystemdCgroup = false/SystemdCgroup = true/&#x27; /etc/containerd/config.toml</span></span><br><span class="line"><span class="string">      systemctl enable containerd --now</span></span><br><span class="line"><span class="string">      changed_when: false</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">containerd</span> <span class="string">version</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;containerd --version&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">version</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">containerd</span> <span class="string">version</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">version.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini containerd_playbook.yml -K</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/containerd-install.png" alt="containerd-install.png"></p><h2 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h2><p><code>common_conf_set.sh</code>配置设置脚本内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line">sysctl --system</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw --now</span><br></pre></td></tr></table></figure><p><code>common_playbook.yml</code>内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">the</span> <span class="string">common</span> <span class="string">setting</span> <span class="string">script</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/common_conf_set.sh</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/opt/common_conf_set.sh</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">script</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;/bin/bash /opt/common_conf_set.sh&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">result.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini common_playbook.yml -K</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/common_config.png" alt="common_comfig"></p><h1 id="安装kubeadm-kubelet-kubectl"><a href="#安装kubeadm-kubelet-kubectl" class="headerlink" title="安装kubeadm, kubelet, kubectl"></a>安装kubeadm, kubelet, kubectl</h1><h2 id="导入软件源，并且安装组件"><a href="#导入软件源，并且安装组件" class="headerlink" title="导入软件源，并且安装组件"></a>导入软件源，并且安装组件</h2><p><code>k8s_apt_add.sh</code>  我在写这个的时候最新版本就是v1.29</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/Release.key |</span><br><span class="line">    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/ /&quot;</span> |</span><br><span class="line">    <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">apt-mark hold kubelet kubeadm kubectl</span><br><span class="line"><span class="built_in">sleep</span> 5</span><br></pre></td></tr></table></figure><p><code>k8s_apt_palybook.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">k8s</span> <span class="string">to</span> <span class="string">apt</span> <span class="string">keying</span> <span class="string">and</span> <span class="string">install</span> <span class="string">kubelet</span> <span class="string">kubeadm</span> <span class="string">kubectl</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/k8s_apt_add.sh</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/opt/k8s_apt_add.sh</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">script</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;/bin/bash /opt/k8s_apt_add.sh&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">version</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;kubeadm version &amp;&amp; echo \&quot;kubelet version: $(kubelet --version)\&quot; &amp;&amp; echo \&quot;kubectl version: $(kubectl version)\&quot;&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">version</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">result.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini k8s_apt_playbook.yml -K</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/kubeadm-kubelet-kubectl-install.png" alt="kubeadm-kubelet-kubectl-install"></p><h1 id="安装k8s"><a href="#安装k8s" class="headerlink" title="安装k8s"></a>安装k8s</h1><h2 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h2><p>写了个swap关闭脚本<code>swapoff.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">swapoff -a &amp;&amp; sed -i <span class="string">&#x27;s/^\([^#]*swap.*\)/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(cat /etc/swaps | awk &#x27;&#123;if(NR&gt;1)</span>&#123;print <span class="variable">$0</span>&#125;&#125;&#x27;)&quot;</span> == <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Swap has been shut down !!!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Swap is still in place now !!!&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><code>swapoff_playbook.yml</code> 内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">script</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/swapoff.sh</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/opt/swapoff.sh</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Turn</span> <span class="string">off</span> <span class="string">and</span> <span class="string">check</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;/bin/bash /opt/swapoff.sh&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">check</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">result.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini swapoff_playbook.yml -K</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/turnoffswap.png" alt="turnoffswap"></p><h2 id="开装"><a href="#开装" class="headerlink" title="开装"></a>开装</h2><p><code>master_playbook.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">initialize</span> <span class="string">the</span> <span class="string">cluster</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;kubeadm init --control-plane-endpoint=master --pod-network-cidr=10.244.0.0/16 &amp;&amp; sleep 5&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">.kube</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">become_user:</span> <span class="string">basi</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/basi/.kube</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&#x27;0755&#x27;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">admin.conf</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">remote_src:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/kubernetes/admin.conf</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/basi/.kube/config</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">basi</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">basi</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Cni</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml &amp;&amp; sleep 5&quot;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">join</span> <span class="string">token</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;kubeadm token create --print-join-command&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">kubernetes_join_command</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">join</span> <span class="string">command</span> <span class="string">to</span> <span class="string">local</span> <span class="string">file.</span></span><br><span class="line">      <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">local_action:</span> <span class="string">copy</span> <span class="string">content=&quot;&#123;&#123;</span> <span class="string">kubernetes_join_command.stdout_lines[0]</span> <span class="string">&#125;&#125;&quot;</span> <span class="string">dest=&quot;/tmp/kubernetes_join_command&quot;</span> <span class="string">mode=0755</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Master</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&quot;kubectl get nodes&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">Master</span> <span class="string">status</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">result.stdout_lines</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>nodes_playbook.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">and</span> <span class="string">remove</span> <span class="string">/etc/kubernetes/kubelet.conf</span> <span class="string">if</span> <span class="string">it</span> <span class="string">exists</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/kubernetes/kubelet.conf</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">and</span> <span class="string">remove</span> <span class="string">/etc/kubernetes/pki/ca.crt</span> <span class="string">if</span> <span class="string">it</span> <span class="string">exists</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">join</span> <span class="string">command</span> <span class="string">from</span> <span class="string">Ansiblehost</span> <span class="string">to</span> <span class="string">the</span> <span class="string">worker</span> <span class="string">nodes.</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/tmp/kubernetes_join_command</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/kubernetes_join_command</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&#x27;0755&#x27;</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Join</span> <span class="string">the</span> <span class="string">Worker</span> <span class="string">nodes</span> <span class="string">to</span> <span class="string">the</span> <span class="string">cluster.</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;/bin/bash /tmp/kubernetes_join_command&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">joined_or_not</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Info</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">joined_or_not.stdout_lines</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span>                               </span><br></pre></td></tr></table></figure><p><code>playbook</code> 开跑！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i inventory.ini master_playbook.yml -K</span><br><span class="line">ansible-playbook -i inventory.ini nodes_playbook.yml -K</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/k8s-master.png" alt="master"></p><p><img src="https://cdn.basi-a.top/images/k8s-nodes-join.png" alt="nodes-join"></p><h1 id="k8s-启动！！！！"><a href="#k8s-启动！！！！" class="headerlink" title="k8s 启动！！！！"></a>k8s 启动！！！！</h1><h2 id="先改一下-lt-none-gt-的角色名-顺便看看状态"><a href="#先改一下-lt-none-gt-的角色名-顺便看看状态" class="headerlink" title="先改一下&lt;none&gt;的角色名, 顺便看看状态"></a>先改一下<code>&lt;none&gt;</code>的角色名, 顺便看看状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node node01 node-role.kubernetes.io/worker=worker</span><br><span class="line">kubectl label node node02 node-role.kubernetes.io/worker=worker</span><br><span class="line">kubectl label node node03 node-role.kubernetes.io/worker=worker</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/roles.png" alt="roles"></p><h2 id="装个管理面板"><a href="#装个管理面板" class="headerlink" title="装个管理面板"></a>装个管理面板</h2><p>到github上找一下最新版本的<a href="https://github.com/kubernetes/dashboard/releases/latest"><code>dashboard</code></a>,  我现在的主线版本是<code>v3.0.0-alpha0</code>, 从这个版本起底层架构发生了变化。</p><blockquote><p>Starting from the release of the Kubernetes Dashboard, the underlying architecture has changed, and it requires a clean installation. Please remove the previous installation first.<code>v3</code></p><p>Kubernetes Dashboard now uses <a href="https://cert-manager.io/docs/installation/">cert-manager</a> and <a href="https://docs.nginx.com/nginx-ingress-controller/installation/">nginx-ingress-controller</a> by default to work properly. Please make sure you have them installed in your cluster if you want to use a manifest-based installation path. The helm-based approach can install all required dependencies automatically for you if needed.</p></blockquote><p>开装，得先安装一下<a href="https://cert-manager.io/docs/installation/"><code>cert-manager</code></a>和<a href="https://kubernetes.github.io/ingress-nginx/deploy/#quick-start"><code>nginx-ingress-controller</code></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v3.0.0-alpha0/charts/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>有点尴尬呢，这个版本还没适配1.29的k8s，先这样，等更新</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>咋说呢…..</p><p>感觉我这玩意有很大的优化空间，先这样，就当练手了，哪天再细想去…….</p><p>得搞个<code>harbor</code>做私有仓库</p><p>哪天在添个加外部<code>etcd</code>集群的，看看在弄个双<code>master</code>的，，再上个用<code>keepalived</code>做主备的双<code>haproxy</code>给这俩<code>master</code>做均衡负载</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于用上了不敢用的btrfs，嗯真香</title>
      <link href="/2023/12/24/%E7%BB%88%E4%BA%8E%E7%94%A8%E4%B8%8A%E4%BA%86%E4%B8%8D%E6%95%A2%E7%94%A8%E7%9A%84btrfs%EF%BC%8C%E5%97%AF%E7%9C%9F%E9%A6%99/"/>
      <url>/2023/12/24/%E7%BB%88%E4%BA%8E%E7%94%A8%E4%B8%8A%E4%BA%86%E4%B8%8D%E6%95%A2%E7%94%A8%E7%9A%84btrfs%EF%BC%8C%E5%97%AF%E7%9C%9F%E9%A6%99/</url>
      
        <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>我的新机器有两块1T大小的SSD, 一块 <code>/dev/sda</code> 一块 <code>/dev/nvme0n1</code>，分区情况如下</p><table><thead><tr><th>磁盘&#x2F;分区</th><th>文件系统</th></tr></thead><tbody><tr><td>&#x2F;dev&#x2F;sda</td><td>—</td></tr><tr><td>&#x2F;dev&#x2F;sda1</td><td>btrfs</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1</td><td>—</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p1</td><td>FAT32</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>btrfs</td></tr></tbody></table><p><code>btrfs</code>子卷创建情况如下</p><table><thead><tr><th>分区</th><th>子卷</th><th>挂载点</th></tr></thead><tbody><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>@</td><td>&#x2F;</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>@log</td><td>&#x2F;var&#x2F;log</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>@cache</td><td>&#x2F;var&#x2F;cache</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>@snapshots</td><td>&#x2F;.snapshots</td></tr><tr><td>&#x2F;dev&#x2F;sda1</td><td>@home</td><td>&#x2F;home</td></tr><tr><td>&#x2F;dev&#x2F;sda1</td><td>@swap</td><td>&#x2F;swap</td></tr></tbody></table><h1 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F 32 /dev/nvme0n1p1</span><br><span class="line">mkfs.btrfs /dev/sda1</span><br><span class="line">mkfs.btrfs /dev/nvme0n1p2</span><br></pre></td></tr></table></figure><h1 id="挂载父卷，创建子卷"><a href="#挂载父卷，创建子卷" class="headerlink" title="挂载父卷，创建子卷"></a>挂载父卷，创建子卷</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p2 /mnt</span><br><span class="line">btrfs su cr /mnt/@</span><br><span class="line">btrfs su cr /mnt/@<span class="built_in">log</span></span><br><span class="line">btrfs su cr /mnt/@cache</span><br><span class="line">btrfs su cr /mnt/@snapshots</span><br><span class="line">umount /mnt</span><br><span class="line">mount /dev/sda1 /mnt</span><br><span class="line">btrfs su cr /mnt/@home</span><br><span class="line">btrfs su cr /mnt/@swap</span><br><span class="line">umount /mnt</span><br></pre></td></tr></table></figure><h1 id="挂载子卷-以及引导分区"><a href="#挂载子卷-以及引导分区" class="headerlink" title="挂载子卷, 以及引导分区"></a>挂载子卷, 以及引导分区</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p2 /mnt -o subvol=@,noatime,discard=async,compress=zstd</span><br><span class="line">mount /dev/nvme0n1p2 /mnt/var/log -o subvol=@<span class="built_in">log</span>,noatime,discard=async,compress=zstd</span><br><span class="line">mount /dev/nvme0n1p2 /mnt/var/cache -o subvol=@cache,noatime,discard=async,compress=zstd</span><br><span class="line">mount /dev/sda1 /mnt/home -o subvol=@home,noatime,discard=async,compress=zstd</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/swap</span><br><span class="line">mount /dev/sda1 /mnt/swap -o subvol=@swap,noatime,discard=async,compress=zstd</span><br><span class="line">mount /dev/nvme0n1p1 /boot</span><br></pre></td></tr></table></figure><h1 id="安装系统，生成新系统-etc-fstab"><a href="#安装系统，生成新系统-etc-fstab" class="headerlink" title="安装系统，生成新系统/etc/fstab"></a>安装系统，生成新系统<code>/etc/fstab</code></h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>安装基础包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacstrap -K /mnt base base-devel linux linux-headers linux-firmware vim amd-ucode btrfs-progs</span><br><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><p><code>chroot</code>到新系统环境进行常规安装过程配置，常规操作略</p><p>需要在新系统环境修改<code>/etc/mkinitcpio.conf</code>, 找到<code>MODULES=()</code>, 括号里面写上<code>btrfs</code>,使系统启动时加载<code>btrfs</code>内核模块，从而正常启动系统</p><p><strong>每次编辑&#x2F;etc&#x2F;mkinitcpio.conf，都要记得重新生成initramfs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -P</span><br></pre></td></tr></table></figure><p>之后，安装<code>grub</code>就行了</p><h1 id="重启进入新系统，用上snapper，为作死保驾护航"><a href="#重启进入新系统，用上snapper，为作死保驾护航" class="headerlink" title="重启进入新系统，用上snapper，为作死保驾护航"></a>重启进入新系统，用上snapper，为作死保驾护航</h1><p>安装<code>snapper</code>,<code>snapper-gui</code>(非必须)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S snapper</span><br><span class="line">paru -S snapper-gui</span><br></pre></td></tr></table></figure><p>安装<code>grub-btrfs</code>和<code>inotify-tools</code>,开启一个服务, 使得每次出现新的快照时，都会在grub配置文件添加快照入口，在不恢复快照情况下直接进入快照，方便排查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> grub-btrfsd --now</span><br></pre></td></tr></table></figure><p>创建对<code>/</code>进行快照的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snapper -c root create-config /</span><br></pre></td></tr></table></figure><p>编辑配置文件<code>/etc/snapper/configs/root</code>, 修改一下，可以进行快照的用户和组</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALLOW_USERS=&quot;&quot;</span><br><span class="line">ALLOW_GROUPS=&quot;wheel&quot;</span><br></pre></td></tr></table></figure><p>启动定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> snapper-timeline.timer --now</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> snapper-cleanup.timer --now</span><br></pre></td></tr></table></figure><p>之后就可以尽情的折腾了，大不了就回滚</p><hr><hr><hr><h1 id="禁用写时复制"><a href="#禁用写时复制" class="headerlink" title="禁用写时复制"></a>禁用写时复制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chattr +C /var/log</span><br><span class="line">sudo chattr +C /var/cache</span><br></pre></td></tr></table></figure><h1 id="交换文件"><a href="#交换文件" class="headerlink" title="交换文件"></a>交换文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo btrfs filesystem mkswapfile --size 32g --uuid clear /swap/swapfile</span><br><span class="line">swapon /swap/swapfile</span><br></pre></td></tr></table></figure><p>写入<code>/swap/swapfile none swap defaults 0 0</code>到<code>/etc/fstab</code></p><p>我弄完最后的状态<br><img src="https://cdn.basi-a.top/images/2023-12-25-121830_1920x1080_scrot.webp" alt="两个磁盘的子卷"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filesystem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jumpserver尝鲜</title>
      <link href="/2023/10/14/jumpserver%E5%B0%9D%E9%B2%9C/"/>
      <url>/2023/10/14/jumpserver%E5%B0%9D%E9%B2%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JumpServer"><a href="#什么是JumpServer" class="headerlink" title="什么是JumpServer"></a>什么是JumpServer</h1><blockquote><p><a href="https://jumpserver.org/">JumpServer</a> 是广受欢迎的开源堡垒机，是符合 4A 规范的专业运维安全审计系统。JumpServer 帮助企业以更安全的方式管控和登录所有类型的资产，实现事前授权、事中监察、事后审计，满足等保合规要求。</p></blockquote><p>JumpServer 堡垒机支持的资产类型包括：</p><ul><li>SSH (Linux &#x2F; Unix &#x2F; 网络设备 等)</li><li>Windows (Web 方式连接 &#x2F; 原生 RDP 连接)</li><li>数据库 (MySQL &#x2F; MariaDB &#x2F; Oracle &#x2F; SQLServer &#x2F; PostgreSQL &#x2F; ClickHouse 等)</li><li>NoSQL (Redis &#x2F; MongoDB 等)</li><li>GPT (ChatGPT 等)</li><li>云服务 (Kubernetes &#x2F; VMware vSphere 等)</li><li>Web 站点 (各类系统的 Web 管理后台)</li><li>应用 (通过 Remote App 连接各类应用)</li></ul><h1 id="实验环境规划"><a href="#实验环境规划" class="headerlink" title="实验环境规划"></a>实验环境规划</h1><p>此次安装<code>JumpServer</code>版本v3.7.2；各个服务器均为<code>centos7.9</code></p><table><thead><tr><th align="center">IP地址</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">192.168.250.10</td><td align="center">NFS、MySQL、Redis</td></tr><tr><td align="center">192.168.250.11</td><td align="center">JumpServer node01</td></tr><tr><td align="center">192.168.250.12</td><td align="center">JumpServer node02</td></tr><tr><td align="center">192.168.250.13</td><td align="center">HAProxy、MiniO、Elasticsearch</td></tr></tbody></table><h1 id="密码密钥规划"><a href="#密码密钥规划" class="headerlink" title="密码密钥规划"></a>密码密钥规划</h1><table><thead><tr><th align="center">服务</th><th align="center">用户名</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">HAproxy</td><td align="center">admin</td><td align="center">haproxY_passw0rd</td></tr><tr><td align="center">MySQL</td><td align="center">jumpserver</td><td align="center">JumpSerVER_Pswd</td></tr><tr><td align="center"></td><td align="center">root</td><td align="center">Pass_W0Rd</td></tr><tr><td align="center">Redis</td><td align="center"></td><td align="center">red1s_Passw0rd</td></tr><tr><td align="center">MinIO</td><td align="center">minio</td><td align="center">m1n10_pAss</td></tr><tr><td align="center">Elasticsearch</td><td align="center">elastic</td><td align="center">esSeaRch_pswd</td></tr></tbody></table><table><thead><tr><th align="center">JumpServer配置项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">SECRET_KEY</td><td align="center">FtuiouGOIygOIYGIPYvfutoFfyIpiIGvuvTGP</td></tr><tr><td align="center">BOOTSTRAP_TOKEN</td><td align="center">GYoFtuOtcYovOyvOTUcFT</td></tr></tbody></table><h1 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h1><h2 id="NMR"><a href="#NMR" class="headerlink" title="NMR"></a>NMR</h2><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><h4 id="安装epel源，然后安装组件以及依赖"><a href="#安装epel源，然后安装组件以及依赖" class="headerlink" title="安装epel源，然后安装组件以及依赖"></a>安装epel源，然后安装组件以及依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><h4 id="启动NFS服务"><a href="#启动NFS服务" class="headerlink" title="启动NFS服务"></a>启动NFS服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind nfs-server nfs-lock nfs-idmap --now</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014142627365.png" alt="image-20231014142627365"></p><h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=nfs --permanent --zone=public</span><br><span class="line">firewall-cmd --add-service=mountd --permanent --zone=public</span><br><span class="line">firewall-cmd --add-service=rpc-bind --permanent --zone=public</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="配置NFS，并使其生效"><a href="#配置NFS，并使其生效" class="headerlink" title="配置NFS，并使其生效"></a>配置NFS，并使其生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line"><span class="built_in">chmod</span> 777 -R /data</span><br><span class="line"></span><br><span class="line">vi /etc/exports</span><br></pre></td></tr></table></figure><p>下面的是<code>/etc/exports</code>的内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data 192.168.250.*(rw,sync,all_squash,anonuid=0,anongid=0)</span><br></pre></td></tr></table></figure><p>打开所有NFS目录共享</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exportfs -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014143637894.png" alt="image-20231014143637894"></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall http://mirrors.ustc.edu.cn/mysql-repo/mysql57-community-release-el7.rpm</span><br><span class="line">sed -i.bak <span class="string">&quot;s|gpgcheck=1|gpgcheck=0|g&quot;</span> /etc/yum.repos.d/mysql-community.repo </span><br><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><h4 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! <span class="string">&quot;<span class="subst">$(cat /usr/bin/mysqld_pre_systemd | grep -v ^\# | grep initialize-insecure )</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sed -i <span class="string">&quot;s@--initialize @--initialize-insecure @g&quot;</span> /usr/bin/mysqld_pre_systemd</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>修改<code>/etc/my.cnf</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir  = /usr/</span><br><span class="line">datadir  = /var/lib/mysql</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket   = /var/lib/mysql/mysql.sock</span><br><span class="line">port     = 3306</span><br><span class="line">user     = mysql</span><br><span class="line"></span><br><span class="line">log_error                = /var/lib/mysql/mysql-error.log</span><br><span class="line">slow-query-log-file      = /var/lib/mysql/mysql-slow.log</span><br><span class="line">log_bin                  = /var/lib/mysql/mysql-bin.log</span><br><span class="line">relay-log                = /var/lib/mysql/mysql-relay-bin</span><br><span class="line"></span><br><span class="line">server-id                = 1</span><br><span class="line"># read_only              = 1</span><br><span class="line">innodb_buffer_pool_size  = 1024M</span><br><span class="line">innodb_log_buffer_size   = 16M</span><br><span class="line"># key_buffer_size        = 64M</span><br><span class="line">key_buffer_size          = 128M</span><br><span class="line">query_cache_size         = 256M</span><br><span class="line">tmp_table_size           = 128M</span><br><span class="line"></span><br><span class="line"># lower_case_table_names = 1</span><br><span class="line">binlog_format            = mixed</span><br><span class="line"># binlog_format          = statement</span><br><span class="line">skip-external-locking</span><br><span class="line">skip-name-resolve</span><br><span class="line">character-set-server     = utf8</span><br><span class="line">collation-server         = utf8_bin</span><br><span class="line"># collation-server       = utf8_general_ci</span><br><span class="line">max_allowed_packet       = 16M</span><br><span class="line">thread_cache_size        = 256</span><br><span class="line">table_open_cache         = 4096</span><br><span class="line">back_log                 = 1024</span><br><span class="line">max_connect_errors       = 100000</span><br><span class="line"># wait_timeout           = 864000</span><br><span class="line"></span><br><span class="line">interactive_timeout      = 1800</span><br><span class="line">wait_timeout             = 1800</span><br><span class="line"></span><br><span class="line">max_connections          = 2048</span><br><span class="line">sort_buffer_size         = 16M</span><br><span class="line">join_buffer_size         = 4M</span><br><span class="line">read_buffer_size         = 4M</span><br><span class="line"># read_rnd_buffer_size   = 8M</span><br><span class="line">read_rnd_buffer_size     = 16M</span><br><span class="line">binlog_cache_size        = 2M</span><br><span class="line">thread_stack             = 192K</span><br><span class="line"></span><br><span class="line">max_heap_table_size      = 128M</span><br><span class="line">myisam_sort_buffer_size  = 128M</span><br><span class="line">bulk_insert_buffer_size  = 256M</span><br><span class="line">open_files_limit         = 65535</span><br><span class="line">query_cache_limit        = 2M</span><br><span class="line">slow-query-log</span><br><span class="line">long_query_time          = 2</span><br><span class="line"></span><br><span class="line">expire_logs_days         = 3</span><br><span class="line">max_binlog_size          = 1000M</span><br><span class="line">slave_parallel_workers   = 4</span><br><span class="line">log-slave-updates</span><br><span class="line"># slave-skip-errors      = 1062,1053,1146,1032</span><br><span class="line"></span><br><span class="line">binlog_ignore_db               = mysql</span><br><span class="line">replicate_wild_ignore_table    = mysql.%</span><br><span class="line">sync_binlog                    = 1</span><br><span class="line"></span><br><span class="line">innodb_file_per_table          = 1</span><br><span class="line">innodb_flush_method            = O_DIRECT</span><br><span class="line">innodb_buffer_pool_instances   = 4</span><br><span class="line">innodb_large_prefix            = ON</span><br><span class="line">innodb_log_file_size           = 512M</span><br><span class="line">innodb_log_files_in_group      = 3</span><br><span class="line">innodb_open_files              = 4000</span><br><span class="line">innodb_read_io_threads         = 8</span><br><span class="line">innodb_write_io_threads        = 8</span><br><span class="line">innodb_thread_concurrency      = 8</span><br><span class="line">innodb_io_capacity             = 2000</span><br><span class="line">innodb_io_capacity_max         = 6000</span><br><span class="line">innodb_lru_scan_depth          = 2000</span><br><span class="line">innodb_max_dirty_pages_pct     = 85</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">quote-names</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer       = 128M</span><br><span class="line">sort_buffer_size = 4M</span><br><span class="line">read_buffer      = 2M</span><br><span class="line">write_buffer     = 2M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer       = 128M</span><br><span class="line">sort_buffer_size = 4M</span><br><span class="line">read_buffer      = 2M</span><br><span class="line">write_buffer     = 2M</span><br></pre></td></tr></table></figure><h4 id="启动MySQL，并配置数据库授权"><a href="#启动MySQL，并配置数据库授权" class="headerlink" title="启动MySQL，并配置数据库授权"></a>启动MySQL，并配置数据库授权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld --now</span><br><span class="line">vi jumpserver.sql</span><br><span class="line">mysqladmin -uroot -p password Pass_W0Rd</span><br><span class="line">mysql -uroot -pPass_W0Rd -e <span class="string">&quot;source jumpserver.sql&quot;</span></span><br></pre></td></tr></table></figure><p>以下是<code>jumpserver.sql</code>内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database jumpserver <span class="keyword">default</span> charset <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;jumpserver&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;JumpSerVER_Pswd&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> jumpserver.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;jumpserver&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>之后查看一下执行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -ujumpserver -pJumpSerVER_Pswd -e <span class="string">&quot;show databases;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014152240030.png" alt="image-20231014152240030"></p><h4 id="配置防火墙-1"><a href="#配置防火墙-1" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>192.168.250.0/24<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>3306<span class="string">&quot; accept&quot;</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014152427704.png" alt="image-20231014152427704"></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="安装ius源"><a href="#安装ius源" class="headerlink" title="安装ius源"></a>安装ius源</h4><blockquote><p><a href="https://ius.io/">IUS</a>（Inline with Upstream Stable）是一个社区项目，它旨在为Linux企业发行版提供可选软件的最新版RPM软件包。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://mirrors.aliyun.com/ius/ius-release-el7.rpm</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y redis6</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014172149154.png" alt="image-20231014172149154"></p><h4 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/redis/redis.conf /etc/redis/reids.conf.bak</span><br><span class="line">sed -i <span class="string">&quot;s|bind 127.0.0.1|bind 0.0.0.0|g&quot;</span> /etc/redis/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s|daemonize no|daemonize yes|g&quot;</span> /etc/redis/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s|# supervised auto|supervised auto|g&quot;</span> /etc/redis/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;/^protected-mode/a\requirepass red1s_Passw0rd&#x27;</span> /etc/redis/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;/^# maxmemory-policy noeviction/a\maxmemory-policy allkeys-lru&#x27;</span> /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis --now</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014174710443.png" alt="image-20231014174710443"></p><h4 id="配置防火墙-2"><a href="#配置防火墙-2" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.250.0/24&quot; port protocol=&quot;tcp&quot; port=&quot;6379&quot; accept&quot;</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="检查防火墙规则"><a href="#检查防火墙规则" class="headerlink" title="检查防火墙规则"></a>检查防火墙规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-all</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014175343155.png" alt="image-20231014175343155"></p><h2 id="JumpServer"><a href="#JumpServer" class="headerlink" title="JumpServer"></a>JumpServer</h2><h3 id="node01"><a href="#node01" class="headerlink" title="node01"></a>node01</h3><h4 id="配置NFS"><a href="#配置NFS" class="headerlink" title="配置NFS"></a>配置NFS</h4><h5 id="安装NFS依赖，查看NFS服务器情况"><a href="#安装NFS依赖，查看NFS服务器情况" class="headerlink" title="安装NFS依赖，查看NFS服务器情况"></a>安装NFS依赖，查看NFS服务器情况</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br><span class="line">showmount -e 192.168.250.10</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231014180735583.png" alt="image-20231014180735583"></p><h5 id="挂载NFS目录，并配置开机自动挂载"><a href="#挂载NFS目录，并配置开机自动挂载" class="headerlink" title="挂载NFS目录，并配置开机自动挂载"></a>挂载NFS目录，并配置开机自动挂载</h5><blockquote><p>将 Core 持久化目录挂载到 NFS, 默认 &#x2F;opt&#x2F;jumpserver&#x2F;core&#x2F;data, 请根据实际情况修改</p><p>JumpServer 持久化目录定义相关参数为 VOLUME_DIR, 在安装 JumpServer 过程中会提示</p><p>可以写入到 &#x2F;etc&#x2F;fstab, 重启自动挂载. 注意: 设置后如果 nfs 损坏或者无法连接该服务器将无法启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/jumpserver/core/data</span><br><span class="line">mount -t nfs 192.168.250.10:/data /opt/jumpserver/core/data</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;192.168.250.10:/data /opt/jumpserver/core/data nfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="升级Linux内核"><a href="#升级Linux内核" class="headerlink" title="升级Linux内核"></a>升级Linux内核</h4><p>就不编译内核了，太慢了，用<a href="http://elrepo.org/tiki/kernel-lt">elrepo</a>的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">yum -y install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-lt-devel kernel-lt -y</span><br><span class="line">grub2-set-default 0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231015105624932.png" alt="image-20231015105624932"></p><h4 id="安装JumpServer"><a href="#安装JumpServer" class="headerlink" title="安装JumpServer"></a>安装JumpServer</h4><h5 id="先下载离线安装包并上传到-x2F-opt，然后修改临时配置文件"><a href="#先下载离线安装包并上传到-x2F-opt，然后修改临时配置文件" class="headerlink" title="先下载离线安装包并上传到&#x2F;opt，然后修改临时配置文件"></a>先下载离线安装包并上传到&#x2F;opt，然后修改临时配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxvf jumpserver-offline-installer-v3.7.2-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> jumpserver-offline-installer-v3.7.2-amd64</span><br><span class="line">vi config-example.txt</span><br></pre></td></tr></table></figure><p>需要修改<code>config-example.txt</code>内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 修改下面选项, 其他保持默认, 请勿直接复制此处内容</span><br><span class="line">### 注意: SECRET_KEY 和要其他 JumpServer 服务器一致, 加密的数据将无法解密</span><br><span class="line"></span><br><span class="line">################################## 镜像配置 ###################################</span><br><span class="line">#</span><br><span class="line"># 国内连接 docker.io 会超时或下载速度较慢, 开启此选项使用华为云镜像加速</span><br><span class="line"># 取代旧版本 DOCKER_IMAGE_PREFIX</span><br><span class="line">#</span><br><span class="line">DOCKER_IMAGE_MIRROR=1</span><br><span class="line"></span><br><span class="line"># 安装配置</span><br><span class="line">### 注意持久化目录 VOLUME_DIR, 如果上面 NFS 挂载其他目录, 此处也要修改. 如: NFS 挂载到 /data/jumpserver/core/data, 则 VOLUME_DIR=/data/jumpserver</span><br><span class="line">VOLUME_DIR=/opt/jumpserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Core 配置</span><br><span class="line">### 启动后不能再修改，否则密码等等信息无法解密, 请勿直接复制下面的字符串</span><br><span class="line">SECRET_KEY=FtuiouGOIygOIYGIPYvfutoFfyIpiIGvuvTGP                 # 要其他 JumpServer 服务器一致 (*)</span><br><span class="line">BOOTSTRAP_TOKEN=GYoFtuOtcYovOyvOTUcFT                            # 要其他 JumpServer 服务器一致 (*)</span><br><span class="line">LOG_LEVEL=ERROR                                                  # 日志等级</span><br><span class="line"></span><br><span class="line"># JumpServer 容器使用的网段, 请勿与现有的网络冲突, 根据实际情况自行修改</span><br><span class="line">#</span><br><span class="line">DOCKER_SUBNET=172.16.50.0/24</span><br><span class="line"></span><br><span class="line"># SESSION_COOKIE_AGE=86400</span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE=True                             # 关闭浏览器 session 过期</span><br><span class="line"></span><br><span class="line"># MySQL 配置</span><br><span class="line"></span><br><span class="line">DB_HOST=192.168.250.10</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_USER=jumpserver</span><br><span class="line">DB_PASSWORD=JumpSerVER_Pswd</span><br><span class="line">DB_NAME=jumpserver</span><br><span class="line"></span><br><span class="line"># Redis 配置</span><br><span class="line"></span><br><span class="line">REDIS_HOST=192.168.250.10</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">REDIS_PASSWORD=red1s_Passw0rd</span><br><span class="line"></span><br><span class="line"># KoKo Lion 配置</span><br><span class="line">SHARE_ROOM_TYPE=redis                                            # KoKo Lion 使用 redis 共享</span><br><span class="line">REUSE_CONNECTION=false                                           # Koko 禁用连接复用</span><br></pre></td></tr></table></figure><h5 id="执行脚本，安装服务"><a href="#执行脚本，安装服务" class="headerlink" title="执行脚本，安装服务"></a>执行脚本，安装服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmsctl.sh install</span><br></pre></td></tr></table></figure><p>之后安装过程的选项，emmm，其实一路回车就好，预配置文件里面已经写了，这样就一路用写配置文件里面的</p><h5 id="启动JumpServer"><a href="#启动JumpServer" class="headerlink" title="启动JumpServer"></a>启动JumpServer</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmsctl.sh start</span><br></pre></td></tr></table></figure><h3 id="node02"><a href="#node02" class="headerlink" title="node02"></a>node02</h3><p>过程以及配置和node01一样</p><h2 id="HME"><a href="#HME" class="headerlink" title="HME"></a>HME</h2><h3 id="HAproxy"><a href="#HAproxy" class="headerlink" title="HAproxy"></a>HAproxy</h3><h4 id="安装epel源"><a href="#安装epel源" class="headerlink" title="安装epel源"></a>安装epel源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装HAproxy，修改配置文件"><a href="#安装HAproxy，修改配置文件" class="headerlink" title="安装HAproxy，修改配置文件"></a>安装HAproxy，修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y haproxy</span><br><span class="line"><span class="built_in">cp</span> /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak</span><br><span class="line">vi /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>配置文件内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global</span><br><span class="line">    # to have these messages end up in /var/log/haproxy.log you will</span><br><span class="line">    # need to:</span><br><span class="line">    #</span><br><span class="line">    # 1) configure syslog to accept network log events.  This is done</span><br><span class="line">    #    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span><br><span class="line">    #    /etc/sysconfig/syslog</span><br><span class="line">    #</span><br><span class="line">    # 2) configure local2 events to go to the /var/log/haproxy.log</span><br><span class="line">    #   file. A line like the following can be added to</span><br><span class="line">    #   /etc/sysconfig/syslog</span><br><span class="line">    #</span><br><span class="line">    #    local2.*                       /var/log/haproxy.log</span><br><span class="line">    #</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line"></span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class="line"># use if not designated in their block</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">    bind *:8080</span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri /haproxy                      # 监控页面, 请自行修改. 访问地址为 http://192.168.250.13:8080/haproxy</span><br><span class="line">    stats refresh 5s</span><br><span class="line">    stats realm haproxy-status</span><br><span class="line">    stats auth admin:haproxY_passw0rd       # 账户密码, 请自行修改. 访问 http://192.168.250.13:8080/haproxy 会要求输入</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># check  检活参数说明</span><br><span class="line"># inter  间隔时间, 单位: 毫秒</span><br><span class="line"># rise   连续成功的次数, 单位: 次</span><br><span class="line"># fall   连续失败的次数, 单位: 次</span><br><span class="line"># 例: inter 2s rise 2 fall 3</span><br><span class="line"># 表示 2 秒检查一次状态, 连续成功 2 次服务正常, 连续失败 3 次服务异常</span><br><span class="line">#</span><br><span class="line"># server 服务参数说明</span><br><span class="line"># server 192.168.250.11 192.168.250.11:80 weight 1 cookie web01</span><br><span class="line"># 第一个 192.168.250.11 做为页面展示的标识, 可以修改为其他任意字符串</span><br><span class="line"># 第二个 192.168.250.11:80 是实际的后端服务端口</span><br><span class="line"># weight 为权重, 多节点时按照权重进行负载均衡</span><br><span class="line"># cookie 用户侧的 cookie 会包含此标识, 便于区分当前访问的后端节点</span><br><span class="line"># 例: server db01 192.168.250.11:3306 weight 1 cookie db_01</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">listen jms-web</span><br><span class="line">    bind *:80                               # 监听 80 端口</span><br><span class="line">    mode http</span><br><span class="line"></span><br><span class="line">    # redirect scheme https if !&#123; ssl_fc &#125;  # 重定向到 https</span><br><span class="line">    # bind *:443 ssl crt /opt/ssl.pem       # https 设置</span><br><span class="line"></span><br><span class="line">    option httpchk GET /api/health/         # Core 检活接口</span><br><span class="line"></span><br><span class="line">    stick-table type ip size 200k expire 30m</span><br><span class="line">    stick on src</span><br><span class="line"></span><br><span class="line">    balance leastconn</span><br><span class="line">    server 192.168.250.11 192.168.250.11:80 weight 1 cookie web01 check inter 2s rise 2 fall 3  # JumpServer 服务器</span><br><span class="line">    server 192.168.250.12 192.168.250.12:80 weight 1 cookie web02 check inter 2s rise 2 fall 3</span><br><span class="line"></span><br><span class="line">listen jms-ssh</span><br><span class="line">    bind *:2222</span><br><span class="line">    mode tcp</span><br><span class="line"></span><br><span class="line">    option tcp-check</span><br><span class="line"></span><br><span class="line">    fullconn 500</span><br><span class="line">    balance source</span><br><span class="line">    server 192.168.250.11 192.168.250.11:2222 weight 1 check inter 2s rise 2 fall 3 send-proxy</span><br><span class="line">    server 192.168.250.12 192.168.250.12:2222 weight 1 check inter 2s rise 2 fall 3 send-proxy</span><br><span class="line"></span><br><span class="line">listen jms-koko</span><br><span class="line">    mode http</span><br><span class="line"></span><br><span class="line">    option httpclose</span><br><span class="line">    option forwardfor</span><br><span class="line">    option httpchk GET /koko/health/ HTTP/1.1\r\nHost:\ 192.168.250.13  # KoKo 检活接口, host 填写 HAProxy 的 ip 地址</span><br><span class="line"></span><br><span class="line">    cookie SERVERID insert indirect</span><br><span class="line">    hash-type consistent</span><br><span class="line">    fullconn 500</span><br><span class="line">    balance leastconn</span><br><span class="line">    server 192.168.250.11 192.168.250.11:80 weight 1 cookie web01 check inter 2s rise 2 fall 3</span><br><span class="line">    server 192.168.250.12 192.168.250.12:80 weight 1 cookie web02 check inter 2s rise 2 fall 3</span><br><span class="line"></span><br><span class="line">listen jms-lion</span><br><span class="line">    mode http</span><br><span class="line"></span><br><span class="line">    option httpclose</span><br><span class="line">    option forwardfor</span><br><span class="line">    option httpchk GET /lion/health/ HTTP/1.1\r\nHost:\ 192.168.250.13  # Lion 检活接口, host 填写 HAProxy 的 ip 地址</span><br><span class="line"></span><br><span class="line">    cookie SERVERID insert indirect</span><br><span class="line">    hash-type consistent</span><br><span class="line">    fullconn 500</span><br><span class="line">    balance leastconn</span><br><span class="line">    server 192.168.250.11 192.168.250.11:80 weight 1 cookie web01 check inter 2s rise 2 fall 3</span><br><span class="line">    server 192.168.250.12 192.168.250.12:80 weight 1 cookie web02 check inter 2s rise 2 fall 3</span><br><span class="line"></span><br><span class="line">listen jms-magnus</span><br><span class="line">    bind *:30000</span><br><span class="line">    mode tcp</span><br><span class="line"></span><br><span class="line">    option tcp-check</span><br><span class="line"></span><br><span class="line">    fullconn 500</span><br><span class="line">    balance source</span><br><span class="line">    server 192.168.250.11 192.168.250.11:30000 weight 1 check inter 2s rise 2 fall 3 send-proxy</span><br><span class="line">    server 192.168.250.12 192.168.250.12:30000 weight 1 check inter 2s rise 2 fall 3 send-proxy</span><br></pre></td></tr></table></figure><h4 id="配置SElinux，启动HAproxy"><a href="#配置SElinux，启动HAproxy" class="headerlink" title="配置SElinux，启动HAproxy"></a>配置SElinux，启动HAproxy</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P haproxy_connect_any 1</span><br><span class="line">systemctl <span class="built_in">enable</span> haproxy --now</span><br></pre></td></tr></table></figure><h4 id="配置防火墙-3"><a href="#配置防火墙-3" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=2222/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=33060/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=33061/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>配置docker，然后启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/docker/</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure><blockquote><p><code>/etc/docker/daemon.json</code>的内容如下</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;live-restore&quot;: true,</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://hub-mirror.c.163.com&quot;,&quot;https://mirror.ccs.tencentyun.com&quot;,&quot;https://registry.docker-cn.com&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;&quot;max-file&quot;: &quot;3&quot;, &quot;max-size&quot;: &quot;10m&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装MinIO"><a href="#安装MinIO" class="headerlink" title="安装MinIO"></a>安装MinIO</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/jumpserver/minio</span><br><span class="line"><span class="built_in">cd</span> /opt/jumpserver/minio</span><br><span class="line">vi docker-compose.yml</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">minio:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">jms_minio</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">minio/minio:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/opt/jumpserver/minio/data:/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/opt/jumpserver/minio/config:/root/.minio</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=minio</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=m1n10_pAss</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">        <span class="attr">healthcheck:</span></span><br><span class="line">            <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">            <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">            <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">            <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="进入MinIO，创建存储桶"><a href="#进入MinIO，创建存储桶" class="headerlink" title="进入MinIO，创建存储桶"></a>进入MinIO，创建存储桶</h4><p><img src="https://cdn.basi-a.top/images/image-20231014212031171.png" alt="image-20231014212031171"></p><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><h4 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/jumpserver/elasticsearch</span><br><span class="line"><span class="built_in">cd</span> /opt/jumpserver/elasticsearch</span><br><span class="line">vi docker-compose.yml</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">es:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">jms_es</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.17.6</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/opt/jumpserver/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/opt/jumpserver/elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cluster.name=docker-cluster</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">discovery.type=single-node</span>            <span class="comment"># 单节点</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">network.host=0.0.0.0</span>                  <span class="comment"># 锁定物理内存, 不使用 swap</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">xpack.security.enabled=true</span>         <span class="comment"># 开启安全模块</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TAKE_FILE_OWNERSHIP=true</span>            <span class="comment"># 自动修改挂载文件夹的所属用户</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms2g</span> <span class="string">-Xmx2g</span>      <span class="comment"># JVM 内存大小, 推荐设置为主机内存的一半</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ELASTIC_PASSWORD=esSeaRch_pswd</span>        <span class="comment"># Elasticsearch 密码</span></span><br></pre></td></tr></table></figure><p>检查一下<code>es</code>是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -u elastic http://192.168.250.13:9200</span><br></pre></td></tr></table></figure><p><img src="https://cdn.basi-a.top/images/image-20231015143405199.png" alt="image-20231015143405199"></p><h1 id="食用"><a href="#食用" class="headerlink" title="食用"></a>食用</h1><h2 id="JumpServer中配置-MinIO"><a href="#JumpServer中配置-MinIO" class="headerlink" title="JumpServer中配置 MinIO"></a>JumpServer中配置 MinIO</h2><blockquote><ul><li>访问 JumpServer Web 页面并使用管理员账号进行登录。</li><li>系统设置-&gt;组件设置-&gt;录像存储</li><li>根据下方的说明进行填写，保存后在 [终端管理] 页面对所有组件进行 [更新]，录像存储选择 [jms-mino]，提交。</li></ul><table><thead><tr><th>选项</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>名称 (Name)</td><td>jms-minio</td><td>标识, 不可重复</td></tr><tr><td>类型 (Type)</td><td>Ceph</td><td>固定, 不可更改</td></tr><tr><td>桶名称 (Bucket)</td><td>jumpserver</td><td>Bucket Name</td></tr><tr><td>Access key</td><td>minio</td><td>MINIO_ROOT_USER</td></tr><tr><td>Secret key</td><td>m1n10_pAss</td><td>MINIO_ROOT_PASSWORD</td></tr><tr><td>端点 (Endpoint)</td><td><a href="http://192.168.2500.13:9000">http://192.168.2500.13:9000</a></td><td>minio 服务访问地址</td></tr><tr><td>默认存储</td><td></td><td>新组件将自动使用该存储</td></tr></tbody></table></blockquote><p><img src="https://cdn.basi-a.top/images/image-20231015134936369.png" alt="image-20231015134936369"></p><h2 id="JumpServer配置-Elasticsearch"><a href="#JumpServer配置-Elasticsearch" class="headerlink" title="JumpServer配置 Elasticsearch"></a>JumpServer配置 Elasticsearch</h2><blockquote><ul><li>访问 JumpServer Web 页面并使用管理员账号进行登录。</li><li>系统设置-&gt;组件设置-&gt;命令存储</li><li>根据下方的说明进行填写，保存后在 [终端管理] 页面对所有组件进行 [更新]，命令存储选择 [jms-es]，提交。</li></ul><table><thead><tr><th>选项</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>名称 (Name)</td><td>jms-es</td><td>标识, 不可重复</td></tr><tr><td>类型 (Type)</td><td>Elasticsearch</td><td>固定, 不可更改</td></tr><tr><td>主机 (Hosts)</td><td><a href="http://elastic:esSeaRch_pswd@192.168.250.13:9200/">http://elastic:esSeaRch_pswd@192.168.250.13:9200</a></td><td><a href="http://es_host:es_port">http://es_host:es_port</a></td></tr><tr><td>索引 (Index)</td><td>jumpserver</td><td>索引</td></tr><tr><td>忽略证书认证</td><td></td><td>https 自签 ssl 需要勾选</td></tr><tr><td>默认存储</td><td></td><td>新组件将自动使用该存储</td></tr></tbody></table></blockquote><p><img src="https://cdn.basi-a.top/images/image-20231015144559333.png" alt="image-20231015144559333"></p><h2 id="直接访问HAproxy服务器的IP，愉快食用"><a href="#直接访问HAproxy服务器的IP，愉快食用" class="headerlink" title="直接访问HAproxy服务器的IP，愉快食用"></a>直接访问HAproxy服务器的IP，愉快食用</h2><p><img src="https://cdn.basi-a.top/images/image-20231015151431511.png" alt="image-20231015151431511"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jumpserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次创建僵尸进程，以及批量杀死僵尸进程的实验</title>
      <link href="/2023/10/05/%E4%B8%80%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%89%B9%E9%87%8F%E6%9D%80%E6%AD%BB%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/10/05/%E4%B8%80%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%89%B9%E9%87%8F%E6%9D%80%E6%AD%BB%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是僵尸进程-孤儿进程"><a href="#什么是僵尸进程-孤儿进程" class="headerlink" title="什么是僵尸进程, 孤儿进程"></a>什么是僵尸进程, 孤儿进程</h1><blockquote><p><code>僵尸进程</code>: 当一个进程终止，但其父进程还没有通过<code>wait()</code>或<code>waitpid()</code>系统调用来获取其终止状态时，该进程就变成了僵尸进程。僵尸进程是指已经完成执行但仍然在进程表中保留条目的进程。这种情况通常发生在父进程没有充分回收子进程资源的情况下。僵尸进程会占用系统资源，因此父进程应该及时处理子进程的终止状态，以避免僵尸进程的产生。</p></blockquote><blockquote><p><code>孤儿进程</code>: 孤儿进程是指其父进程提前终止或者意外终止，而子进程仍然在继续执行。当父进程退出时，孤儿进程会被init进程（在现代系统中通常是systemd或者initd等）接管。init进程会成为孤儿进程的新父进程，并负责回收其资源，确保其能够正常终止，避免它变成僵尸进程。通过将孤儿进程的父进程设置为init进程，系统确保了即使原始父进程退出，子进程仍然能够得到适当的处理，防止了孤儿进程的出现。</p></blockquote><h1 id="创建僵尸进程"><a href="#创建僵尸进程" class="headerlink" title="创建僵尸进程"></a>创建僵尸进程</h1><p>下面的代码可以创建僵尸进程, 前10秒子进程是正常进程, 之后20秒子进程变成僵尸进程, 再之后程序进入循环等待状态, 此时子进程一直是僵尸进程</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 10&quot;</span>,<span class="string">&quot;echo \&quot;hello zombie\&quot;&quot;</span>)</span><br><span class="line">    err := cmd.Start()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;启动子进程失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;父进程 PID: &quot;</span>,os.Getpid())</span><br><span class="line">    fmt.Println(<span class="string">&quot;子进程 PID: &quot;</span>,cmd.Process.Pid)</span><br><span class="line">    <span class="comment">// 用于等待子进程执行完成, 使得可以观察到僵尸进程</span></span><br><span class="line">    time.Sleep(<span class="number">30</span> * time.Second)</span><br><span class="line">    <span class="comment">// 使用信号监听器，以便在收到信号时杀死子进程</span></span><br><span class="line">    sigCh := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        &lt;-sigCh</span><br><span class="line">        cmd.Process.Kill()</span><br><span class="line">        cmd.Process.Wait() <span class="comment">// 等待进程结束，避免僵尸进程</span></span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序进入等待状态</span></span><br><span class="line">    <span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过下面的命令编译上面的代码, 之后执行三遍生成的二进制文件, 且挂起到后台, 此时便产生了三个父进程以及对应三个僵尸子进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> zombie &amp;&amp; <span class="built_in">cd</span> zombie</span><br><span class="line">go mod init zombie</span><br><span class="line">go mod tidy</span><br><span class="line">go build</span><br><span class="line">./zombie &amp;</span><br><span class="line">./zombie &amp;</span><br><span class="line">./zombie &amp;</span><br></pre></td></tr></table></figure><p>这里还有一份C语言的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> child_pid = fork(); <span class="comment">// 创建子进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程代码</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;子进程：%d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// 子进程立即退出</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child_pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程代码</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父进程：%d\n&quot;</span>, getpid());</span><br><span class="line">        sleep(<span class="number">360</span>); <span class="comment">// 父进程等待一段时间，这段时间内子进程是僵尸进程</span></span><br><span class="line">        wait(<span class="literal">NULL</span>); <span class="comment">// 父进程收回子进程的资源</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父进程退出\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子进程失败</span></span><br><span class="line">        perror(<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc zombie.c -o zombie</span><br><span class="line">./zombie &amp;</span><br><span class="line">./zombie &amp;</span><br></pre></td></tr></table></figure><h1 id="批量杀死僵尸进程"><a href="#批量杀死僵尸进程" class="headerlink" title="批量杀死僵尸进程"></a>批量杀死僵尸进程</h1><p>下面的<code>shell</code>脚本, 获取系统所有的僵尸进程的PID, 然后用这个PID获取其父进程的PID, 最后杀死所有的父进程, 这样僵尸进程也就都变成了孤儿进程, 然后被init进程回收资源, 从而达到批量杀死僵尸进程的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取系统中所有僵尸进程的PID</span></span><br><span class="line">zombie_pids=$(ps -aux | grep -v <span class="string">&quot;grep&quot;</span> | grep <span class="string">&quot;Z&quot;</span> | awk <span class="string">&#x27;NR&gt;1&#123;print $2&#125;&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">father_pids=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 没有僵尸进程时退出脚本</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$zombie_pids</span>&quot;</span> == <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 获取每一个僵尸进程父进程的PID</span></span><br><span class="line"><span class="keyword">for</span> child_pid <span class="keyword">in</span> <span class="variable">$zombie_pids</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    father_pid=$(ps -o ppid= -p <span class="variable">$child_pid</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">    father_pids=<span class="string">&quot;<span class="variable">$father_pids</span> <span class="variable">$father_pid</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用tr命令将空格替换为换行符，并用sort和uniq命令获取唯一的父进程PID</span></span><br><span class="line">unique_father_pids=$(<span class="built_in">echo</span> <span class="variable">$father_pids</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -u)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用kill命令一次性杀掉所有的父进程</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> -9 <span class="variable">$unique_father_pids</span> ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;kill father_pids done&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">log_path=<span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date +<span class="string">&quot;%F %T&quot;</span>)</span> father_pids: <span class="subst">$(echo $unique_father_pids | tr &#x27;\n&#x27; &#x27; &#x27;)</span>&quot;</span> | <span class="built_in">tee</span> -a <span class="variable">$log_path</span>/father_pids_killed.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date +<span class="string">&quot;%F %T&quot;</span>)</span> zombie_pids: <span class="variable">$zombie_pids</span>&quot;</span> | <span class="built_in">tee</span> -a <span class="variable">$log_path</span>/zombie_pids_get.log</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x kill-zombie.sh</span><br><span class="line">./kill-zombie.sh</span><br></pre></td></tr></table></figure><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p><img src="https://cdn.basi-a.top/images/zombie.webp" alt="截图"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> bash </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用mosh缓解下网络不好导致的ssh高延迟</title>
      <link href="/2023/09/30/%E7%94%A8mosh%E7%BC%93%E8%A7%A3%E4%B8%8B%E7%BD%91%E7%BB%9C%E4%B8%8D%E5%A5%BD%E5%AF%BC%E8%87%B4%E7%9A%84ssh%E9%AB%98%E5%BB%B6%E8%BF%9F/"/>
      <url>/2023/09/30/%E7%94%A8mosh%E7%BC%93%E8%A7%A3%E4%B8%8B%E7%BD%91%E7%BB%9C%E4%B8%8D%E5%A5%BD%E5%AF%BC%E8%87%B4%E7%9A%84ssh%E9%AB%98%E5%BB%B6%E8%BF%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>前几天买了个<code>香橙派3B</code>, 想着搭配着<code>zerotier</code>, 我就有能随时随地用的Linux环境了, 在家里还好, 别说局域网直连，就算流量从<code>zerotier</code>走一圈,也一点不卡<br>但是呢, 只要到了网络比较复杂的地方，那个延迟啊，啧啧啧<br>于是呢经过一番冲浪, 发现了<code>mosh</code>, 算是解决了我被<code>ssh</code>卡的头皮发麻的问题</p></blockquote><h1 id="mosh"><a href="#mosh" class="headerlink" title="mosh"></a>mosh</h1><p><a href="https://mosh.org/">mosh</a></p><h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mosh</span><br></pre></td></tr></table></figure><blockquote><p>其他Linux发行版也是如此，包管理里面基本上都有</p></blockquote><h2 id="Windows客户端获取"><a href="#Windows客户端获取" class="headerlink" title="Windows客户端获取"></a>Windows客户端获取</h2><p><a href="https://github.com/felixse/FluentTerminal/tree/master/Dependencies/MoshExecutables/x64">mosh-client and mosh download</a><br>mosh 官方是没有提供Windows的客户端以及服务端的，但是<code>felixse/FluentTerminal</code>这个终端，有编译好的客户端可执行文件，下载下来，添加环境变量就能用</p><h1 id="连接方法"><a href="#连接方法" class="headerlink" title="连接方法"></a>连接方法</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosh basi@IP</span><br></pre></td></tr></table></figure><blockquote><p>就和命令行使用ssh连接一样，mosh会先用ssh登录，之后开启mosh-server，之后就是UDP协议的交互了<br>还可以加上<code>-p PORT</code>来指定使用哪个udp端口, 为了能用呢防火墙要放行这个端口，默认不写的话是udp 60000-61000,记得防火墙要放行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosh basi@IP -p PORT</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><blockquote><p>先ssh连接进去，然后手动启动mosh-server,拿到MOSH_KEY再连接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh basi@IP</span><br><span class="line">mosh-server -new -p PORT</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MOSH_KEY=<span class="string">&quot;KEY&quot;</span> &amp;&amp; mosh-client IP PORT</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows 命令行连接</span></span><br><span class="line"><span class="variable">$env</span>:MOSH_KEY=<span class="string">&quot;KEY&quot;</span></span><br><span class="line">mosh-client IP PORT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zerotier, mosh, ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>top各个字段的含义</title>
      <link href="/2023/08/07/top%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E5%90%AB%E4%B9%89/"/>
      <url>/2023/08/07/top%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前很多时候只管用，用完就扔，不注意细节，最近因为一些事情意识到了这样不行，于是在这里整理一下<code>top</code>命令的各个字段的含义</p><h1 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h1><h2 id="什么是top"><a href="#什么是top" class="headerlink" title="什么是top"></a>什么是top</h2><p>在Linux和Unix操作系统中，top是一个常用的命令行实用程序，用于动态监控系统中运行的进程和系统资源的使用情况。</p><h2 id="各个字段含义"><a href="#各个字段含义" class="headerlink" title="各个字段含义"></a>各个字段含义</h2><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>PID (Process ID)</td><td>进程ID，唯一标识一个正在运行的进程</td></tr><tr><td>USER</td><td>进程的拥有者，即运行该进程的用户</td></tr><tr><td>PR (Priority)</td><td>进程的优先级。数值越低表示优先级越高</td></tr><tr><td>NI (Nice value)</td><td>进程的Nice值，表示进程的静态优先级调整。数值越高表示优先级越低</td></tr><tr><td>VIRT (Virtual Memory)</td><td>进程使用的虚拟内存大小，包括进程代码、数据和共享库等</td></tr><tr><td>RES (Resident Memory)</td><td>进程使用的实际物理内存大小，即驻留集大小</td></tr><tr><td>SHR (Shared Memory)</td><td>进程使用的共享内存大小</td></tr><tr><td>S (Status)</td><td>进程的状态，可能的状态有：R（运行）、S（睡眠）、D（不可中断的睡眠）、Z（僵尸进程）等</td></tr><tr><td>%CPU (CPU Usage)</td><td>进程在最近一次采样间隔中使用的CPU资源百分比</td></tr><tr><td>%MEM (Memory Usage)</td><td>进程使用的物理内存占系统总内存的百分比</td></tr><tr><td>TIME+ (CPU Time)</td><td>进程的累计CPU占用时间</td></tr><tr><td>COMMAND (Command)</td><td>启动进程的命令行命令或者进程的名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl fix bug and init</title>
      <link href="/2023/07/12/wsl-fix-bug-and-init/"/>
      <url>/2023/07/12/wsl-fix-bug-and-init/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近重新用上了Windows，又开始弄wsl，发现了些小问题，分别是读宿主机的<code>hosts</code>和<code>/usr/lib/wsl/lib</code>里面本应该是链接但都是文件，于是写了个小脚本解决这个问题</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/lib/wsl/lib-link</span><br><span class="line"><span class="built_in">ln</span> -sf /usr/lib/wsl/lib/* /usr/lib/wsl/lib-link</span><br><span class="line">sed -i <span class="string">&quot;s|/usr/lib/wsl/lib|/usr/lib/wsl/lib-link|g&quot;</span> /etc/ld.so.conf.d/ld.wsl.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/wsl.conf&lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">[automount]</span></span><br><span class="line"><span class="string">ldconfig = false</span></span><br><span class="line"><span class="string">[network]</span></span><br><span class="line"><span class="string">generateHosts = false</span></span><br><span class="line"><span class="string">[boot]</span></span><br><span class="line"><span class="string">systemd = true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> wsl2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> wsl2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux 本地安装 GNS3 模拟器</title>
      <link href="/2023/06/02/Archlinux-%E5%AE%89%E8%A3%85-GNS3-%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/2023/06/02/Archlinux-%E5%AE%89%E8%A3%85-GNS3-%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="GNS3是什么"><a href="#GNS3是什么" class="headerlink" title="GNS3是什么"></a>GNS3是什么</h1><p><a href="https://gns3.com/">GNS3</a> 是思科公司开源的网络模拟器，与<code>packet tracer</code>不同，<code>packet tracer</code>是纯软件模拟，而<code>GNS3</code>是更高级的模拟器，网络设备都是跑的虚拟机，需要自行准备网络设备的镜像；<code>windows</code>和<code>macos</code>的可以运行在虚拟机里面，此时网络设备就是嵌套虚拟化的；而<code>Linux</code>直接运行于本地，此时网络设备可以是<code>qemu</code>的虚拟机，<code>docker</code>容器，或者<code>Vbox</code>的虚拟机；总的来说，这是一个很强大的网络模拟器。</p><h1 id="安装GNS3"><a href="#安装GNS3" class="headerlink" title="安装GNS3"></a>安装GNS3</h1><p>因为我只有这一台装着<code>ArchLinux</code>的笔记本，所以其他系统，以及其他Linux发行版的我就不写了。</p><h2 id="从AUR安装需要的包"><a href="#从AUR安装需要的包" class="headerlink" title="从AUR安装需要的包"></a>从AUR安装需要的包</h2><p><strong>要提前安装好libvirt 能用KVM&#x2F;QEMU</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paru -S gns3-gui gns3-server dynamips dnsmasq ubridge vpvs wireshark</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>这里用的用户，就是要运行GNS3的用户，用不着sudo提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gns3-server@USER --now</span><br></pre></td></tr></table></figure><p>此用户需要属于<code>libvirt</code>组，免得开个KVM虚拟机还要提权； 还要属于<code>docker</code>组，同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G libvirt USER</span><br><span class="line">sudo usermod -a -G docker USER</span><br></pre></td></tr></table></figure><h2 id="设置要用的终端"><a href="#设置要用的终端" class="headerlink" title="设置要用的终端"></a>设置要用的终端</h2><p>用于调试设备，默认是<code>xterm</code>，设置里面可以改，我设置成了<code>KDE</code>自带的<code>konsole</code></p><h2 id="GNS3使用wireshark抓包"><a href="#GNS3使用wireshark抓包" class="headerlink" title="GNS3使用wireshark抓包"></a>GNS3使用wireshark抓包</h2><p><code>GNS3</code>是可以和<code>wireshark</code>一起用的，用来抓取拓扑设备间的数据包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="variable">$HOME</span>/GNS3/wireshark</span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/wireshark <span class="variable">$HOME</span>/GNS3/wireshark</span><br></pre></td></tr></table></figure><p><code>wireshark</code>要用的话，此用户还得属于<code>wireshark</code>组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G wireshark USER</span><br></pre></td></tr></table></figure><h1 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h1><p><em>需要自己下载</em><br>这里找到两个提供资源的</p><p><a href="https://ccie.lol/blog/2016/07/03/cisco-ios-image-download/">https://ccie.lol/blog/2016/07/03/cisco-ios-image-download/</a></p><p><a href="https://bbs.hh010.com/forum-ios-1.html">https://bbs.hh010.com/forum-ios-1.html</a></p><p>下载之后，到GNS3里面添加就好</p><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><p>填加了一个设备，开了起来，让我逝着玩一玩<br><img src="https://cdn.basi-a.top/images/images_gns3.webp" alt="gns3"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
          <category> GNS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> archlinux, gns3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Use Iptables</title>
      <link href="/2023/05/18/How-to-Use-Iptables/"/>
      <url>/2023/05/18/How-to-Use-Iptables/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables-工作过程"><a href="#iptables-工作过程" class="headerlink" title="iptables 工作过程"></a>iptables 工作过程</h1><p>关于iptables的工作流程，我觉得<code>Arch wiki</code>, 这里画的特别好, ( ^ v ^ )<br><img src="https://cdn.basi-a.top/images/iptables.webp" alt="iptable-run"></p><h1 id="表（Tables）"><a href="#表（Tables）" class="headerlink" title="表（Tables）"></a>表（Tables）</h1><p>iptables有5张表：</p><ol><li><code>raw</code> 用于配置数据包，<code>raw</code> 中的数据包不会被系统跟踪 </li><li><code>filter</code> 存放所有与防火墙相关操作的默认表</li><li><code>nat</code> 用于网络地址转换</li><li><code>mangle</code> 用于特定数据的修改</li><li><code>security</code> 用于强制访问规则</li></ol><p>其中<code>filter</code>和<code>nat</code>最常用。</p><h1 id="链（Chains）"><a href="#链（Chains）" class="headerlink" title="链（Chains）"></a>链（Chains）</h1><ol><li>INPUT链 ：处理输入数据包</li><li>OUTPUT链 ：处理输出数据包</li><li>FORWARD链 ：处理转发数据包</li><li>PREROUTING链 ：用于目标地址转换（DNAT）</li><li>POSTOUTING链 ：用于源地址转换（SNAT）</li></ol><h1 id="写了个很适合我自己的初始化脚本"><a href="#写了个很适合我自己的初始化脚本" class="headerlink" title="写了个很适合我自己的初始化脚本"></a>写了个很适合我自己的初始化脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">WHITE_LIST_PATH=<span class="string">&quot;<span class="subst">$(pwd)</span>/whitelist.txt&quot;</span></span><br><span class="line">BLACK_LIST_PATH=<span class="string">&quot;<span class="subst">$(pwd)</span>/blacklist.txt&quot;</span></span><br><span class="line">CIDR_REGEX_v4=<span class="string">&quot;^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[12]?[0-9])$&quot;</span></span><br><span class="line">CIDR_REGEX_v6=<span class="string">&quot;^([0-9a-fA-F]&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)*)?(::([0-9a-fA-F]&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)*)?)?(/[0-9]&#123;1,3&#125;)?$&quot;</span></span><br><span class="line"></span><br><span class="line">ipv4-<span class="function"><span class="title">set</span></span>()&#123;</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line"></span><br><span class="line">iptables -P INPUT DROP <span class="comment"># 配置默认的不让进</span></span><br><span class="line">iptables -P FORWARD DROP <span class="comment"># 默认的不允许转发</span></span><br><span class="line">iptables -P OUTPUT ACCEPT <span class="comment"># 默认的可以出去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换回接口出入随意</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o lo -j ACCEPT</span><br><span class="line"><span class="comment"># 放行ssh</span></span><br><span class="line">SSHPORT=<span class="string">&quot;<span class="subst">$(ss -4tulnp | grep <span class="string">&quot;ssh&quot;</span> | awk &#x27;&#123;print $5&#125;&#x27; | awk -F<span class="string">&quot;:&quot;</span> &#x27;&#123;print $2&#125;&#x27;)</span>&quot;</span></span><br><span class="line">iptables -A INPUT -p tcp --dport <span class="string">&quot;<span class="variable">$&#123;SSHPORT&#125;</span>&quot;</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁ICMP</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type echo-request -j DROP <span class="comment"># 白名单不受影响</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ipv6-<span class="function"><span class="title">set</span></span>()&#123;</span><br><span class="line">ip6tables -F</span><br><span class="line">ip6tables -X</span><br><span class="line">ip6tables -Z</span><br><span class="line"></span><br><span class="line">ip6tables -P INPUT DROP <span class="comment"># 配置默认的不让进</span></span><br><span class="line">ip6tables -P FORWARD DROP <span class="comment"># 默认的不允许转发</span></span><br><span class="line">ip6tables -P OUTPUT ACCEPT <span class="comment"># 默认的可以出去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换回接口出入随意</span></span><br><span class="line">ip6tables -A INPUT -i lo -j ACCEPT</span><br><span class="line">ip6tables -A OUTPUT -o lo -j ACCEPT</span><br><span class="line"><span class="comment"># 放行ssh</span></span><br><span class="line">SSHPORT=<span class="string">&quot;<span class="subst">$(ss -6tulnp | grep <span class="string">&quot;ssh&quot;</span> | awk &#x27;&#123;print $5&#125;&#x27; | awk -F<span class="string">&quot;]:&quot;</span> &#x27;&#123;print $2&#125;&#x27;)</span>&quot;</span></span><br><span class="line">ip6tables -A INPUT -p tcp --dport <span class="string">&quot;<span class="variable">$&#123;SSHPORT&#125;</span>&quot;</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁ICMP</span></span><br><span class="line">ip6tables -A INPUT -p icmpv6 --icmpv6-type echo-request -j DROP</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iptables-<span class="function"><span class="title">set</span></span>()&#123;</span><br><span class="line">ipv4-set</span><br><span class="line">ipv6-set</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 配置ipv6 ipv4 黑白名单</span></span><br><span class="line"><span class="function"><span class="title">Whitelist_And_Blacklist</span></span>()&#123;</span><br><span class="line">    <span class="keyword">while</span> IFS= <span class="built_in">read</span> -r line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="variable">$CIDR_REGEX_v4</span> ]]; <span class="keyword">then</span></span><br><span class="line">            iptables -A INPUT -s <span class="string">&quot;<span class="variable">$line</span>&quot;</span> -j ACCEPT</span><br><span class="line">        <span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="variable">$CIDR_REGEX_v6</span> ]]; <span class="keyword">then</span></span><br><span class="line">            ip6tables -A INPUT -s <span class="string">&quot;<span class="variable">$line</span>&quot;</span> -j ACCEPT</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span> error value&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$WHITE_LIST_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> IFS= <span class="built_in">read</span> -r line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="variable">$CIDR_REGEX_v4</span> ]]; <span class="keyword">then</span></span><br><span class="line">            iptables -A INPUT -s <span class="string">&quot;<span class="variable">$line</span>&quot;</span> -j DROP</span><br><span class="line">        <span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> =~ <span class="variable">$CIDR_REGEX_v6</span> ]]; <span class="keyword">then</span></span><br><span class="line">            ip6tables -A INPUT -s <span class="string">&quot;<span class="variable">$line</span>&quot;</span> -j DROP</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span> error value&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$BLACK_LIST_PATH</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">iptables-set</span><br><span class="line">Whitelist_And_Blacklist</span><br><span class="line"></span><br><span class="line">iptables -L -n -v</span><br><span class="line">ip6tables -L -n -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux, iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算课程总结+个人理解</title>
      <link href="/2023/05/15/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93-%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
      <url>/2023/05/15/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93-%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><em>以下内容部分是上课讲过的，另一部分我自行补充的 （^v^）</em></p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="关掉防火墙和SELinux"><a href="#关掉防火墙和SELinux" class="headerlink" title="关掉防火墙和SELinux"></a>关掉防火墙和SELinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁用firewalld开机自启，然后关闭firewalld</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 先关掉selinux</span></span><br><span class="line">sed -i <span class="string">&quot;s|SELINUX=enforcing|SELINUX=disabled|g&quot;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 修改selinux配置文件永久生效</span></span><br></pre></td></tr></table></figure><h2 id="LVM扩容"><a href="#LVM扩容" class="headerlink" title="LVM扩容"></a>LVM扩容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sdc <span class="comment"># 创建一个新的物理卷 </span></span><br><span class="line">pvs               <span class="comment"># 查看系统中所有的物理卷</span></span><br><span class="line">vgs               <span class="comment"># 查看系统中所有的卷组</span></span><br><span class="line">vgextend centos /dev/sdc <span class="comment"># 将物理卷 /dev/sdc 添加到名为 centos 的卷组中</span></span><br><span class="line">lvs               <span class="comment"># 查看所有逻辑卷</span></span><br><span class="line">lvextend centos/root /dev/sdc <span class="comment"># 将物理卷 /dev/sdc 添加到名为 centos 卷组中的 root 逻辑卷中</span></span><br><span class="line">xfs_growfs /dev/mapper/centos-root</span><br><span class="line"><span class="comment"># 将 centos 卷组中的 root 逻辑卷的文件系统扩展到使用新添加的物理卷 /dev/sdc 的全部空间</span></span><br><span class="line">lsblk -ip <span class="comment"># 查看当前系统中的块设备和它们之间的关系</span></span><br></pre></td></tr></table></figure><h2 id="RAID-磁盘阵列"><a href="#RAID-磁盘阵列" class="headerlink" title="RAID 磁盘阵列"></a>RAID 磁盘阵列</h2><h3 id="各RAID级别"><a href="#各RAID级别" class="headerlink" title="各RAID级别"></a>各RAID级别</h3><blockquote><p><code>RAID（冗余磁盘阵列）</code>是将多个硬盘组合成一个逻辑磁盘，从而提高数据存储的效率和可靠性。常见的 RAID 等级有以下几种：</p><p><code>RAID 0</code>：又称条带化，将数据分块后交替写入多个物理磁盘，以达到提高数据读写性能的目的。但该模式没有冗余备份，一旦任意一块硬盘出现故障，整个 RAID 0 即失效，所有数据都无法恢复。</p><p><code>RAID 1</code>：又称镜像，使用两块相同的硬盘存储相同的数据，实现数据冗余备份。当其中一块硬盘损坏时，另一块硬盘可以继续工作，并且可以从备份中恢复数据。但是相比单个硬盘，RAID 1 存储容量只有单个硬盘的一半。</p><p><code>RAID 5</code>：使用三块或更多的硬盘，其中一个硬盘用于存储校验信息，其余硬盘存储数据。在发生某个硬盘损坏时，可以通过校验信息进行数据恢复。RAID 5 除了具备数据冗余功能之外，还可以提高数据读取速度。但是在写入数据时，需要进行额外的校验计算，因此写入效率相对较低。</p><p><code>RAID 6</code>：和 RAID 5 类似，不同点在于使用两个硬盘来存储校验信息，可以容忍两块硬盘的故障。RAID 6 模式虽然提供更高的可靠性，但是需要额外的存储空间用于存储冗余信息，因此存储容量和效率都要比 RAID 5 稍低。</p><p><code>RAID 10</code>：又称为 RAID 1+0 或镜像条带化，将多个 RAID 1 组成一个 RAID 0 阵列。即先进行数据的镜像备份（RAID 1），再利用这些镜像数据来进行条带化（RAID 0）。RAID 10 同时具备了数据冗余和读写速度的优势，但是需要至少四块硬盘才能实现。</p><p>总之，使用哪种 RAID 等级取决于应用场景，在性能、容错能力、存储成本、存储容量、读写速度等方面需要做出权衡。</p></blockquote><h3 id="软件RAID5"><a href="#软件RAID5" class="headerlink" title="软件RAID5"></a>软件RAID5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb <span class="comment">#磁盘分区</span></span><br><span class="line">mdadm --create /dev/md0 --auto=<span class="built_in">yes</span> --level=5 --raid-devices=3 /dev/sdb&#123;5,6,7&#125;</span><br><span class="line"><span class="comment"># 用一块硬盘的三个分区，创建raid5设备/dev/md0</span></span><br><span class="line"><span class="built_in">mkdir</span> /data01 <span class="comment"># 根目录创建新目录 /data01</span></span><br><span class="line">mkfs.xfs /dev/md0 <span class="comment"># 格式化/dev/md0 使用xfs文件系统</span></span><br><span class="line">mount /dev/md0 /data01 <span class="comment"># 挂载/dev/md0 到/data01</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/md0      /data01     xfs   defaults   0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment"># 开机自动挂载</span></span><br></pre></td></tr></table></figure><h2 id="corntab-计划任务"><a href="#corntab-计划任务" class="headerlink" title="corntab 计划任务"></a>corntab 计划任务</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab [ -u user ] file</span><br><span class="line">crontab [ -u user ] &#123; -l | -r | -e &#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache </span><br><span class="line"></span><br><span class="line">50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 </span><br><span class="line"></span><br><span class="line">50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 </span><br><span class="line"></span><br><span class="line">0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 </span><br><span class="line"></span><br><span class="line">1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 </span><br><span class="line"></span><br><span class="line">00 03 * * 1-5 find /home &quot;*.xxx&quot; -mtime +4 -exec rm &#123;&#125; \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</span><br><span class="line"></span><br><span class="line">30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="每天0点进行数据库全库备份"><a href="#每天0点进行数据库全库备份" class="headerlink" title="每天0点进行数据库全库备份"></a>每天0点进行数据库全库备份</h3><p>备份脚本,&#x2F;root&#x2F;bak.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mysqldump -uUsername -pPassw0rd --all-database &gt; /mysql_bak/mysql_bak_all_$(<span class="built_in">date</span> +%F).sql</span><br></pre></td></tr></table></figure><p>corntab 设置脚本&#x2F;root&#x2F;corn-set.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;00 00 * * * /root/bak.sh&quot;</span> &gt; /root/cornfile</span><br><span class="line">corntab -u root /root/cornfile</span><br></pre></td></tr></table></figure><h2 id="Linux-路由转发"><a href="#Linux-路由转发" class="headerlink" title="Linux 路由转发"></a>Linux 路由转发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态路由，添加目的网络，子网掩码，网关</span></span><br><span class="line">route add -net 192.168.40.0 netmask 255.255.255.0 gw 192.168.30.1</span><br><span class="line">route add -net 192.168.30.0 netmask 255.255.255.0 gw 192.168.40.1</span><br></pre></td></tr></table></figure><h2 id="进程、端口查看"><a href="#进程、端口查看" class="headerlink" title="进程、端口查看"></a>进程、端口查看</h2><h3 id="进程号获取"><a href="#进程号获取" class="headerlink" title="进程号获取"></a>进程号获取</h3><p>有以下两种方法，每一个程序跑起来后系统都会分配一个进程号，所以还可以用来查看某个程序是否以及启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidof process_name <span class="comment"># process_name 进程名</span></span><br><span class="line"></span><br><span class="line">ps -ef | grep -v grep | grep process_name | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs</span><br></pre></td></tr></table></figure><h3 id="查看某个端口是否存在"><a href="#查看某个端口是否存在" class="headerlink" title="查看某个端口是否存在"></a>查看某个端口是否存在</h3><p>直接用<code>netstat</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp | grep port_number <span class="comment"># port_number 端口号</span></span><br></pre></td></tr></table></figure><p>新工具：<code>nc</code>, 应该称之为<code>netcat</code>，下面只看看<code>3306</code>端口是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nc -vz 127.0.0.1 3306 </span><br><span class="line"><span class="comment"># -z 只扫描监听的守护进程，不想他们发送任何数据，不能和-l共用</span></span><br><span class="line"><span class="comment"># -v 生成更详细的输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">Connection to 127.0.0.1 3306 port [tcp/mysql] succeeded!</span><br></pre></td></tr></table></figure><h2 id="服务启动、关闭、检查状态-等"><a href="#服务启动、关闭、检查状态-等" class="headerlink" title="服务启动、关闭、检查状态 等"></a>服务启动、关闭、检查状态 等</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> xxx <span class="comment"># 开机自启</span></span><br><span class="line">systemctl start xxx <span class="comment"># 启动</span></span><br><span class="line">systemctl stop xxx <span class="comment"># 关闭</span></span><br><span class="line">systemctl restart xxx <span class="comment"># 重启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> xxx <span class="comment"># 禁用开机自启</span></span><br><span class="line">systemctl status xxx <span class="comment"># 检查运行状态</span></span><br></pre></td></tr></table></figure><h2 id="shell-script"><a href="#shell-script" class="headerlink" title="shell script"></a>shell script</h2><h3 id="Linux三剑客"><a href="#Linux三剑客" class="headerlink" title="Linux三剑客"></a>Linux三剑客</h3><blockquote><p>Linux三剑客是指grep、awk和sed这三个命令，它们常用于文本处理和数据分析等领域。以下是它们的常用方法：</p><p>grep：用于在文件中查找指定的字符串，常用选项有-i（忽略大小写）、-c（只显示匹配行数）、-v（反向查找）、r（递归搜索）等。<br>例如，在当前目录下查找包含”hello”字符串的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;grep <span class="string">&quot;hello&quot;</span> *</span><br></pre></td></tr></table></figure><p>awk：用于处理文本文件中的数据，可以按照某些规则对文本进行格式化、提取和统计等操作。常用选项有-F（指定分隔符）、-f（从文件读取脚本）、-v（定义变量）等。<br>例如，统计文件中每一列的和：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;awk <span class="string">&#x27;&#123;sum += $1&#125; END &#123;print sum&#125;&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p>sed：用于对文本进行替换、插入、删除等操作。常用选项有-i（直接修改文件）、-e（执行多个编辑命令）、-n（不输出模式空间内容）等。<br>例如，在文件中将“Hello”替换为“Hi”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sed -i <span class="string">&#x27;s/Hello/Hi/g&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p>以上是Linux三剑客的常用方法，它们在文本处理和数据分析等领域非常实用，也是Linux系统管理员和开发人员必备的工具之一。</p></blockquote><blockquote><p>更多用法，见其他脚本，不知道参数，请问那个男人<code>man awk</code></p></blockquote><blockquote><p>egrep -v ‘^(#|$)’ &#x2F;etc&#x2F;keystone&#x2F;keystone.conf_bak_2023-05-01 &gt; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf</p><p>这里面 <code>&#39;^(#|$)&#39;</code> ,<code>^</code> 表示反选， <code>#</code>表示注释行， <code>$</code>表示空行</p></blockquote><h3 id="EOF处理文件内容"><a href="#EOF处理文件内容" class="headerlink" title="EOF处理文件内容"></a>EOF处理文件内容</h3><p><code>直接覆盖</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;/root/test&lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /root/test</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p><code>文件追加内容</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt;/root/test&lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /root/test</span><br><span class="line">123</span><br><span class="line">456</span><br></pre></td></tr></table></figure><p><strong>shell脚本中 <code>&gt;&gt;</code> 是追加 <code>&gt;</code> 是覆盖源文件</strong></p><h1 id="ntp-时间同步"><a href="#ntp-时间同步" class="headerlink" title="ntp 时间同步"></a>ntp 时间同步</h1><p>server 192.168.200.10<br>client 192.168.200.20</p><h2 id="ntp服务器"><a href="#ntp服务器" class="headerlink" title="ntp服务器"></a>ntp服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum -y install ntp</span><br><span class="line">sed -i <span class="string">&quot;s|#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap|restrict 192.168.200.0  mask 255.255.255.0  nomodify notrap|g&quot;</span> /etc/ntp.conf</span><br><span class="line"><span class="comment"># 到/etc/ntp.conf 文件里面把此行取消注释，并改好允许访问的网段，子网掩码</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd &amp;&amp; systemctl start ntpd &amp;&amp; systemctl status ntpd</span><br></pre></td></tr></table></figure><h2 id="ntp客户端"><a href="#ntp客户端" class="headerlink" title="ntp客户端"></a>ntp客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum -y install ntp</span><br><span class="line">sed -i <span class="string">&#x27;/^server/s/^/#/&#x27;</span> /etc/ntp.conf</span><br><span class="line"><span class="comment"># 将配置文件原有的ntp服务器，注释掉</span></span><br><span class="line">sed -i <span class="string">&quot;/^#server/i server 192.168.200.10 iburst&quot;</span> /etc/ntp.conf</span><br><span class="line"><span class="comment"># 在ntp服务器注释行上方插入 server 192.168.200.10 iburst</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd &amp;&amp; systemctl start ntpd &amp;&amp; systemctl status ntpd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install qemu* libvirt* virt* <span class="comment"># KVM的依赖</span></span><br><span class="line">yum -y install bridge-utils <span class="comment"># 网桥的组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qemu是一种Linux里面的模拟器，可以模拟很多的处理器架构，是一种强行模拟的工具，</span></span><br><span class="line"><span class="comment"># 所谓的kvm虚拟机是，qemu+kvm,二者结合的产物，qemu进行模拟，kvm来让虚拟机的性能更强，当不能开启嵌套虚拟化（虚拟机套娃）时，没有kvm支持，此时只能qemu硬算，所以虽然能开虚拟机，但性能会很差</span></span><br></pre></td></tr></table></figure><h2 id="网桥配置"><a href="#网桥配置" class="headerlink" title="网桥配置"></a>网桥配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum -y install bridge-utils <span class="comment">#安装网桥组件包</span></span><br><span class="line"></span><br><span class="line">IPADDR=$(ifconfig ens33 | awk <span class="string">&#x27;&#123;if (NR==2) print $2&#125;&#x27;</span>)  <span class="comment">#获取网卡ens33 IP地址</span></span><br><span class="line">NETMASK=$(ifconfig ens33 | awk <span class="string">&#x27;&#123;if (NR==2) print $4&#125;&#x27;</span>) <span class="comment">#获取子网掩码</span></span><br><span class="line">GATEWAY=$(route -n | awk <span class="string">&#x27;&#123;if (NR==3) print $2&#125;&#x27;</span>)       <span class="comment">#获取网关</span></span><br><span class="line">DNS1=$(egrep -v <span class="string">&#x27;^(#|$)&#x27;</span> /etc/resolv.conf | awk <span class="string">&#x27;&#123;if(NR==1)  print $2&#125;&#x27;</span>) <span class="comment">#获取DNS服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-ens33_bak_$(<span class="built_in">date</span> +%F)    <span class="comment">#备份配置文件</span></span><br><span class="line">sed -i <span class="string">&quot;s|BOOTPROTO=dhcp|BOOTPROTO=none|g&quot;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;BRIDGE=br0&quot;</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/sysconfig/network-scripts/ifcfg-br0&lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">TYPE=Bridge</span></span><br><span class="line"><span class="string">BOOTPROTO=static</span></span><br><span class="line"><span class="string">NAME=br0</span></span><br><span class="line"><span class="string">DEVICE=br0</span></span><br><span class="line"><span class="string">ONBOOT=yes</span></span><br><span class="line"><span class="string">IPADDR=$&#123;IPADDR&#125;</span></span><br><span class="line"><span class="string">NETMASK=$&#123;NETMASK&#125;</span></span><br><span class="line"><span class="string">GATEWAY=$&#123;GATEWAY&#125;</span></span><br><span class="line"><span class="string">DNS1=$&#123;DNS1&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart network <span class="comment"># 重启网络</span></span><br><span class="line">ping -c 1 <span class="variable">$&#123;GATEWAY&#125;</span> <span class="comment"># 测试外网通信</span></span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="docker-install-脚本"><a href="#docker-install-脚本" class="headerlink" title="docker install 脚本"></a>docker install 脚本</h2><p>前提是关掉防火墙，SELinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum remove docker docker-client docker-client-latest docker-common \</span><br><span class="line">docker-latest docker-latest-logrotate \</span><br><span class="line">        docker-logrotate docker-engine</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache fast</span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> != <span class="string">&quot;0&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Docker Install Error.&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ ! -d /etc/docker ] &amp;&amp; <span class="built_in">mkdir</span> /etc/docker</span><br><span class="line">more &lt;&lt;<span class="string">EOF &gt;/etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mariadb:latest</span><br></pre></td></tr></table></figure><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="批量删除容器"><a href="#批量删除容器" class="headerlink" title="批量删除容器"></a>批量删除容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> $(docker ps -a | awk <span class="string">&#x27;&#123;if (NR&gt;1) print $1&#125;&#x27;</span> | xargs)</span><br></pre></td></tr></table></figure><ul><li>这条命令 <code>$()</code> 里面的会先执行；<ul><li><code>docker ps -a</code> 会不管容器的死活，都列出来；</li><li>得到的输出通过管道符 <code>|</code> 作为后面<code>awk</code>的输入</li><li><code>&#39;&#123;if (NR&gt;1) print $1&#125;&#39;</code> 中 <code>NR</code> 为 <code>awk</code> 代表行号的变量，相应的<code>NF</code>作为列号，这里表示是输出行号<code>大于1</code>的第一列，目的是去掉<code>docker ps -a</code>无用的输出只留下<code>CONTAINER ID</code></li><li><code>xargs</code> 是将<code>awk</code>的输出由一列转换成一行</li></ul></li><li><code>$()</code>内命令执行完成后，此时这个没名字的隐形变量，便有了值<ul><li><code>docker rm </code>的后面此时可以理解为写了一堆容器ID ，也就是<code>docker rm</code>这个命令要删除的容器</li></ul></li></ul><h2 id="后台启动容器，然后进入容器"><a href="#后台启动容器，然后进入容器" class="headerlink" title="后台启动容器，然后进入容器"></a>后台启动容器，然后进入容器</h2><p><em>我自己的本地docker, shell是zsh, 提示符➜ ~是我自己设的，不要奇怪</em><br>以<code>golang</code>容器为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 后台运行容器</span></span><br><span class="line">➜ ~ docker run -itd golang</span><br><span class="line">Unable to find image <span class="string">&#x27;golang:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/golang</span><br><span class="line">0e29546d541c: Already exists </span><br><span class="line">9b829c73b52b: Already exists </span><br><span class="line">cb5b7ae36172: Already exists </span><br><span class="line">6494e4811622: Already exists </span><br><span class="line">6e1d20a8313e: Pull complete </span><br><span class="line">593823f101dc: Pull complete </span><br><span class="line">1b4aae56cdbe: Pull complete </span><br><span class="line">Digest: sha256:c72fa9afc50b3303e8044cf28fb358b48032a548e1825819420fd40155a131cb</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> golang:latest</span><br><span class="line">4c7826ffa37754cdb78289820932e00c23c4bc6299ee744cb826ed857c6c88dd</span><br><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">➜ ~ docker <span class="built_in">exec</span> -it $(docker ps | grep golang | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) /bin/bash</span><br><span class="line">root@4c7826ffa377:/go<span class="comment"># ls  </span></span><br><span class="line">bin  src</span><br><span class="line">root@4c7826ffa377:/go<span class="comment"># ls /</span></span><br><span class="line">bin   dev  go    lib    media  opt   root  sbin  sys  usr</span><br><span class="line">boot  etc  home  lib64  mnt    proc  run   srv   tmp  var</span><br><span class="line">root@4c7826ffa377:/go<span class="comment"># exit</span></span><br></pre></td></tr></table></figure><h2 id="保存容器镜像，导入本地镜像"><a href="#保存容器镜像，导入本地镜像" class="headerlink" title="保存容器镜像，导入本地镜像"></a>保存容器镜像，导入本地镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存时 -o 指定保存的文件名, 也可以写成/opt/golang.tar, 这样就保存到了/opt, 而不是执行命令时所在目录</span></span><br><span class="line">➜ ~ docker save -o golang.tar golang:latest         </span><br><span class="line"><span class="comment"># 删除镜像                       </span></span><br><span class="line">➜ ~ docker rmi golang:latest                               </span><br><span class="line">Untagged: golang:latest</span><br><span class="line">Untagged: golang@sha256:c72fa9afc50b3303e8044cf28fb358b48032a548e1825819420fd40155a131cb</span><br><span class="line">Deleted: sha256:276895edf9673267f47528e8a99401f2d2947f6c9c00490f773d5ed8f559bef2</span><br><span class="line">Deleted: sha256:f9925574d34663c6f0f2135512cd1e7b94490279982657a6a40fb0693ce9df41</span><br><span class="line">Deleted: sha256:5ba934ce54ed16893dd8cae2c36bdcc25f9cb1a4d51dba9cbedda4b4f1bbf53f</span><br><span class="line">Deleted: sha256:3a9da346a75c7c4cdacacd945f87d73b964a07007c4e5e8f9435c367176ceeb9</span><br><span class="line"><span class="comment"># 重新导入本地的镜像，golang.tar</span></span><br><span class="line">➜ ~ docker import golang.tar</span><br><span class="line">sha256:49be9fd5efe6db218e87809ccd1bd7022bf90e9e26673ef517d6f7fa4d1a497d</span><br></pre></td></tr></table></figure><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p><strong>先解释一下，openstack，创建数据库的操作, 下面是我综合实验写的sql脚本</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"># 这里临时修改了密码强度限制，长度限制，再重启后，会失效，但对这种一次性的很合适</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE keystone;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> keystone.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> keystone.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"># 创建数据库就不说了，这里建了两个用户 <span class="string">&#x27;keystone&#x27;</span> ，允许本地访问（localhost）、远程访问(<span class="operator">%</span>)，密码都是Ccu2023 ,然后给了这个用户完整的全部的用于操作keystone数据库的权限，以下同理</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE glance;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> glance.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> glance.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE placement;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> placement.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> placement.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE nova_api;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE nova;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE nova_cell0;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova_api.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova_api.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova_cell0.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> nova_cell0.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE neutron;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> neutron.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> neutron.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Ccu2023&#x27;</span>;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>那么正常创建用户，赋予权限该当如何？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 创建新用户</span></span><br><span class="line">CREATE USER <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment"># 这将创建一个用户名为“newuser”的新用户，并设置其密码为“password”。请注意，这里的localhost表示该用户只能从本地主机访问MySQL服务器。如果要允许从远程主机访问该用户，请将localhost替换为远程主机的IP地址或主机名; 如果替换成% 那就是允许所有远程主机访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予用户权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON * . * TO <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment"># 这将授予用户“newuser”在所有数据库和表上的所有权限。如果您只想授予用户特定数据库或表的权限，则可以将星号替换为相应的数据库和表名。例如：</span></span><br><span class="line"></span><br><span class="line">GRANT SELECT, INSERT ON mydatabase.* TO <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment"># 这将授予用户“newuser”在名称为“mydatabase”的数据库中插入和选择数据的权限。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment">#这将刷新MySQL服务器中的权限缓存，以确保新的权限立即生效。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除所有用户除了root用户："><a href="#删除所有用户除了root用户：" class="headerlink" title="删除所有用户除了root用户："></a>删除所有用户除了root用户：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; DELETE FROM mysql.user WHERE user != <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除所有用户包括root用户（危险）："><a href="#删除所有用户包括root用户（危险）：" class="headerlink" title="删除所有用户包括root用户（危险）："></a>删除所有用户包括root用户（危险）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE FROM mysql.user WHERE 1;</span><br></pre></td></tr></table></figure><h2 id="备份操作"><a href="#备份操作" class="headerlink" title="备份操作"></a>备份操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Username 数据库用户名</span></span><br><span class="line"><span class="comment"># Passw0rd 数据库密码</span></span><br><span class="line">mysqldump -uUsername -pPassw0rd dbname &gt; /mysql_bak/mysql_bak_dbname_$(<span class="built_in">date</span> +%F).sql <span class="comment"># 单库备份</span></span><br><span class="line">mysqldump -uUsername -pPassw0rd --all-database &gt; /mysql_bak/mysql_bak_all_$(<span class="built_in">date</span> +%F).sql <span class="comment"># 全库备份</span></span><br><span class="line">mysqldump -uUsername -pPassw0rd --database db1 db2 &gt; /mysql_bak/mysql_bak_dbs_$(<span class="built_in">date</span> +%F).sql <span class="comment"># 多库备份</span></span><br></pre></td></tr></table></figure><h2 id="直接导入已存在的sql文件到数据库"><a href="#直接导入已存在的sql文件到数据库" class="headerlink" title="直接导入已存在的sql文件到数据库"></a>直接导入已存在的sql文件到数据库</h2><p>直接连接数据库mysql&#x2F;mariadb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p<span class="string">&#x27;password&#x27;</span> -e <span class="string">&quot;source xxx.sql;&quot;</span></span><br></pre></td></tr></table></figure><p>宿主机使用容器内数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CONTAINER_ID=$(docker ps | grep mariadb:latest | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">docker <span class="built_in">exec</span> -itd <span class="variable">$&#123;CONTAINER_ID&#125;</span> mysql -uroot -p<span class="string">&#x27;Ccu2023&#x27;</span> -e <span class="string">&quot;source xxx.sql;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="openstack"><a href="#openstack" class="headerlink" title="openstack"></a>openstack</h1><h2 id="rabbitmq-server-消息队列"><a href="#rabbitmq-server-消息队列" class="headerlink" title="rabbitmq-server 消息队列"></a>rabbitmq-server 消息队列</h2><h3 id="安装-启动"><a href="#安装-启动" class="headerlink" title="安装, 启动"></a>安装, 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rabbitmq-server</span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server &amp;&amp; systemctl start rabbitmq-server &amp;&amp; systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user username password</span><br></pre></td></tr></table></figure><h3 id="赋予用户管理权限"><a href="#赋予用户管理权限" class="headerlink" title="赋予用户管理权限"></a>赋予用户管理权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions username <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="opensatck-create"><a href="#opensatck-create" class="headerlink" title="opensatck *** create"></a>opensatck *** create</h2><h3 id="创建用户-1"><a href="#创建用户-1" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"><span class="comment"># 使用的默认域，用户名glance</span></span><br></pre></td></tr></table></figure><h3 id="角色添加到用户和项目"><a href="#角色添加到用户和项目" class="headerlink" title="角色添加到用户和项目"></a>角色添加到用户和项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"><span class="comment"># 添加到了service项目，admin用户</span></span><br></pre></td></tr></table></figure><h3 id="创建域"><a href="#创建域" class="headerlink" title="创建域"></a>创建域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openstack domain create --description <span class="string">&quot;An Example Domain&quot;</span> example</span><br><span class="line"><span class="comment"># 创建了一个example的域</span></span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认域里面创建了个项目service</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br></pre></td></tr></table></figure><h3 id="创建服务和API端点"><a href="#创建服务和API端点" class="headerlink" title="创建服务和API端点"></a>创建服务和API端点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br></pre></td></tr></table></figure><h2 id="openstack-查询"><a href="#openstack-查询" class="headerlink" title="openstack 查询"></a>openstack 查询</h2><p>查询所有用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user list</span><br></pre></td></tr></table></figure><p>查询所有角色：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opensatck role list</span><br></pre></td></tr></table></figure><p>查询所有域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack domain list</span><br></pre></td></tr></table></figure><p>查询所有虚拟机实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack server list</span><br></pre></td></tr></table></figure><p>查询所有网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack network list</span><br></pre></td></tr></table></figure><p>查询所有镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack image list</span><br></pre></td></tr></table></figure><p>查询指定虚拟机实例的详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack server show &lt;instance name or <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure><p>查询指定网络的详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack network show &lt;network name or <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="最小安装，理论"><a href="#最小安装，理论" class="headerlink" title="最小安装，理论"></a>最小安装，理论</h2><h3 id="最小化安装所能涉及到的端口以及服务"><a href="#最小化安装所能涉及到的端口以及服务" class="headerlink" title="最小化安装所能涉及到的端口以及服务"></a>最小化安装所能涉及到的端口以及服务</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">基础服务 </span><br><span class="line">22 ssh</span><br><span class="line">3306 mysql/mariadb</span><br><span class="line">5672 25672 rabbitmq</span><br><span class="line">11211 memcached</span><br><span class="line"></span><br><span class="line">keystone </span><br><span class="line">35357 admin</span><br><span class="line">5000 user</span><br><span class="line"></span><br><span class="line">glance</span><br><span class="line">9191 glance-registry</span><br><span class="line">9292 glance-api</span><br><span class="line"></span><br><span class="line">neutron</span><br><span class="line">9696 neutron</span><br><span class="line"></span><br><span class="line">nova</span><br><span class="line">6080 nova novncproxy</span><br><span class="line">8774 8775 nova-api</span><br><span class="line"></span><br><span class="line">cinder # 上课没讲到</span><br><span class="line">8776 cinder-api</span><br></pre></td></tr></table></figure><h3 id="认证服务keystone"><a href="#认证服务keystone" class="headerlink" title="认证服务keystone"></a>认证服务keystone</h3><h4 id="初始化密钥"><a href="#初始化密钥" class="headerlink" title="初始化密钥"></a>初始化密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure><h4 id="填充数据库，看日志"><a href="#填充数据库，看日志" class="headerlink" title="填充数据库，看日志"></a>填充数据库，看日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="string">&quot;keystone-manage db_sync&quot;</span> keystone</span><br><span class="line"><span class="built_in">tail</span> -f /var/log/keystone/keystone.log</span><br></pre></td></tr></table></figure><h4 id="keystone-bootstarp"><a href="#keystone-bootstarp" class="headerlink" title="keystone bootstarp"></a>keystone bootstarp</h4><p><code>vi bootstarp.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password Ccu2023 \</span><br><span class="line">  --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x bootstarp.sh</span><br><span class="line"><span class="built_in">source</span> bootstarp.sh</span><br></pre></td></tr></table></figure><h4 id="admin-openrc-sh"><a href="#admin-openrc-sh" class="headerlink" title="admin-openrc.sh"></a>admin-openrc.sh</h4><p><code>vi admin-openrc.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=Ccu2023</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x admin-openrc.sh</span><br><span class="line"><span class="built_in">source</span> admin-openrc.sh </span><br><span class="line"><span class="comment"># 每次重启，都要执行这个，否则命令行界面的openstack客户端没有权限操作</span></span><br></pre></td></tr></table></figure><h3 id="镜像服务glance"><a href="#镜像服务glance" class="headerlink" title="镜像服务glance"></a>镜像服务glance</h3><h4 id="填充数据库"><a href="#填充数据库" class="headerlink" title="填充数据库"></a>填充数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="string">&quot;glance-manage db_sync&quot;</span> glance</span><br></pre></td></tr></table></figure><h3 id="放置服务placement"><a href="#放置服务placement" class="headerlink" title="放置服务placement"></a>放置服务placement</h3><h4 id="填充数据库-1"><a href="#填充数据库-1" class="headerlink" title="填充数据库"></a>填充数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="string">&quot;placement-manage db sync&quot;</span> placement</span><br></pre></td></tr></table></figure><h4 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重启httpd,载入placement, 验证服务：</span></span><br><span class="line">systemctl restart httpd</span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><h3 id="计算服务nova"><a href="#计算服务nova" class="headerlink" title="计算服务nova"></a>计算服务nova</h3><h4 id="填充数据库-2"><a href="#填充数据库-2" class="headerlink" title="填充数据库"></a>填充数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="string">&quot;nova-manage api_db sync&quot;</span> nova</span><br><span class="line">/bin/sh -c <span class="string">&quot;nova-manage cell_v2 map_cell0&quot;</span> nova</span><br><span class="line">/bin/sh -c <span class="string">&quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot;</span> no</span><br><span class="line">va</span><br><span class="line">/bin/sh -c <span class="string">&quot;nova-manage db sync&quot;</span> nova</span><br><span class="line">/bin/sh -c <span class="string">&quot;nova-manage cell_v2 list_cells&quot;</span> nova</span><br><span class="line"><span class="comment">#此过程中，使用tail -f /var/log/nova/nova-manage.log，对同步进度进行监控</span></span><br></pre></td></tr></table></figure><h3 id="网络服务neuton"><a href="#网络服务neuton" class="headerlink" title="网络服务neuton"></a>网络服务neuton</h3><h4 id="填充数据库-3"><a href="#填充数据库-3" class="headerlink" title="填充数据库"></a>填充数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步之前要，创建/etc/neutron/plugin.ini指向 ML2 插件配置文件的软连接</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line">/bin/sh -c <span class="string">&quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \</span></span><br><span class="line"><span class="string">--config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot;</span> neutron</span><br></pre></td></tr></table></figure><h3 id="面板-dashboard"><a href="#面板-dashboard" class="headerlink" title="面板 dashboard"></a>面板 dashboard</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Install Minikube on Archlinux to learn for fun</title>
      <link href="/2023/05/11/Install-Minikube-on-Archlinux-to-learn-for-fun/"/>
      <url>/2023/05/11/Install-Minikube-on-Archlinux-to-learn-for-fun/</url>
      
        <content type="html"><![CDATA[<h1 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h1><blockquote><p>minikube quickly sets up a local Kubernetes cluster on macOS, Linux, and Windows. We proudly focus on helping application developers and new Kubernetes users.<br><a href="https://minikube.sigs.k8s.io/docs/">minikube docs</a></p></blockquote><h1 id="Archlinux-安装"><a href="#Archlinux-安装" class="headerlink" title="Archlinux 安装"></a>Archlinux 安装</h1><p>前提是有<code>docker</code>环境，或者<code>KVM</code>，首选<code>docker</code>, 其他的需要改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S minikube kubectl</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首次启动，要拉取镜像，创建容器很慢，指定cn源</span></span><br><span class="line">minikube start --image-mirror-country=<span class="string">&#x27;cn&#x27;</span></span><br><span class="line"><span class="comment">#之后有了容器和镜像就不用指定镜像了</span></span><br><span class="line"><span class="comment">#minikube start</span></span><br></pre></td></tr></table></figure><h1 id="检查pod状态"><a href="#检查pod状态" class="headerlink" title="检查pod状态"></a>检查pod状态</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -A</span><br></pre></td></tr></table></figure><h1 id="打开dashboard"><a href="#打开dashboard" class="headerlink" title="打开dashboard"></a>打开dashboard</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><p>之后就可以愉快的玩耍单机部署的k8s了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes, ArchLinux , k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible执行本地脚本，编译安装redis到远程服务器</title>
      <link href="/2023/02/18/ansible%E6%89%A7%E8%A1%8C%E6%9C%AC%E5%9C%B0%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85redis%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/02/18/ansible%E6%89%A7%E8%A1%8C%E6%9C%AC%E5%9C%B0%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85redis%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="配置ansible"><a href="#配置ansible" class="headerlink" title="配置ansible"></a>配置ansible</h1><p>我本地的机器是archlinux, 先安装ansible</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paru -S ansible</span><br></pre></td></tr></table></figure><p>配置<code>/etc/ansible/hosts</code>, 记录下服务器的IP, 以及普通用户sudo提权密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[centos8]</span><br><span class="line">192.168.56.103 ansible_become_pass=<span class="string">&quot;sudo_password&quot;</span></span><br></pre></td></tr></table></figure><p>发送自己的<code>ssh</code>公钥到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i /home/basi/.ssh/id_rsa.pub basi@192.168.56.103</span><br></pre></td></tr></table></figure><p>检测<code>ansible</code>是否配置正确，返回的结果为<code>root</code>则配置正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible centos8 -u basi -b --become-user root --become-method sudo -m <span class="built_in">command</span> -a <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><p>编写安装脚本<code>redis-install.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://download.redis.io/redis-stable.tar.gz</span><br><span class="line">tar -zxvf redis-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-stable &amp;&amp; make install <span class="comment">#默认安装到/usr/local/bin</span></span><br><span class="line"><span class="built_in">cp</span> redis.conf /usr/local/etc/redis.conf</span><br><span class="line"><span class="built_in">nohup</span> redis-server /usr/local/etc/redis.conf &gt;&gt;/var/log/redis.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>执行本地脚本，编译安装redis到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible centos8 -u basi -b --become-user root --become-method sudo -m script -a <span class="string">&quot;/home/basi/redis-install.sh&quot;</span></span><br></pre></td></tr></table></figure><p>检查是否安装成功，且在运行中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible centos8 -u basi -b --become-user root --become-method sudo -m shell -a <span class="string">&quot;netstat -tulnp | grep redis-server&quot;</span></span><br></pre></td></tr></table></figure><p>成功运行的结果：</p><blockquote><p>192.168.56.103 | CHANGED | rc&#x3D;0 &gt;&gt;<br>tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      4528&#x2F;redis-server 1<br>tcp6       0      0 ::1:6379                :::*                    LISTEN      4528&#x2F;redis-server 1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> centos </tag>
            
            <tag> archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下运行flutter doctor Android Studio 报错 Unable to find bundled Java version version&quot;解决方法</title>
      <link href="/2023/02/16/linux%E4%B8%8B%E8%BF%90%E8%A1%8Cflutter-doctor-Android-Studio-%E6%8A%A5%E9%94%99-Unable-to-find-bundled-Java-version-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/16/linux%E4%B8%8B%E8%BF%90%E8%A1%8Cflutter-doctor-Android-Studio-%E6%8A%A5%E9%94%99-Unable-to-find-bundled-Java-version-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>为了测试自己写的后端代码，想着用<code>flutter</code>弄个前端界面打包成apk;<br>于是在我安装了<code>Android Studio</code>运行<code>flutter doctor -v</code>后，报了三个错误;</p><p>前两个都是<code>Android toolchain</code>的错误，到<code>android studio</code>里面,<br>找到<code>File &gt;&gt;Settings &gt;&gt; System Settings &gt;&gt; Android SDK &gt;&gt; SDK Tools &gt;&gt; Android SDK Command-line Tools</code><br>安装，这就解决了第一个错误，之后运行<code>flutter doctor --android-licenses</code>，接受全部询问。<br>到这前两个都解决了。</p><p>而第三个在<code>Android Studio</code>这里报的<code>Unable to find bundled Java version.</code>错误, 废了我好长时间，下面是我咋解决的记录。</p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><p>一开始，我查资料不是<code>windows</code>的就是<code>macos</code>的，就是没找到<code>linux</code>的;<br>但看了一会发现，都说是最新的<code>Android Studio</code>没有了<code>jre</code>导致的，然后通过复制<code>jre</code>解决的;</p><p>于是我就找到了我的<code>jdk</code>的根目录<code>/usr/lib/jvm/java-19-openjdk</code> 用<code>./bin/jlink --module-path jmods --add-modules java.desktop --output jre</code> 生成了<code>jre</code><br>然后创建软连接到<code>Android Studio</code>的根目录<code>/opt/android-studio/</code>,<br>而我发现这里的<code>/opt/android-studio/jbr/</code>内容和<code>jre</code>是一样的；</p><p>我觉得应该是最新的<code>Android Studio</code>的<code>jre</code>不是没有而是改了名字，我就把刚弄好的<code>jre</code>软连接删掉了，<br>在这重新创建软连接，再次运行<code>flutter doctor -v</code>没有了错误 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/android-studio/ $ sudo <span class="built_in">ln</span> -s jbr jre</span><br><span class="line">/opt/android-studio/ $ <span class="built_in">env</span> CHROME_EXECUTABLE=edge \</span><br><span class="line">flutter doctor -v</span><br></pre></td></tr></table></figure><p>至此问题解决了, 俺很欣慰😃</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> flutter </tag>
            
            <tag> Android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose mariadb+redis 简单部署</title>
      <link href="/2023/01/27/docker-compose-mariadb-redis-%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/01/27/docker-compose-mariadb-redis-%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h1><p>安装这个很简单，就不写了。。。。</p><h2 id="添加用户到docker组"><a href="#添加用户到docker组" class="headerlink" title="添加用户到docker组"></a>添加用户到docker组</h2><p>把操作<code>docker</code>的用户，添加到<code>docker</code>组，这样就不用每次都要切root或者输入sudo密码（啥都用root用户是一种愚蠢的行为。。。小声）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G docker username</span><br></pre></td></tr></table></figure><h1 id="新建文件夹，创建docker-compose-yml-文件"><a href="#新建文件夹，创建docker-compose-yml-文件" class="headerlink" title="新建文件夹，创建docker-compose.yml 文件"></a>新建文件夹，创建docker-compose.yml 文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span> &amp;&amp; vim docker-compose.yml</span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml-内容"><a href="#docker-compose-yml-内容" class="headerlink" title="docker-compose.yml 内容"></a>docker-compose.yml 内容</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use root/123456 as user/password for mariadb</span></span><br><span class="line"><span class="comment"># adminer is a simple tool to control mariadb</span></span><br><span class="line"><span class="comment"># Use 123456 as redis password</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mariadb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mariadb/data:/var/lib/mysql:rw</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MARIADB_ROOT_PASSWORD:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis/data:/data:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf:rw</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><h2 id="创建-redis-conf"><a href="#创建-redis-conf" class="headerlink" title="创建 redis.conf"></a>创建 redis.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p redis/conf</span><br><span class="line">vim redis/conf/redis.conf</span><br></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">timeout 0</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync everysec</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><h2 id="在docker-compose-yml所在目录启动docker"><a href="#在docker-compose-yml所在目录启动docker" class="headerlink" title="在docker-compose.yml所在目录启动docker"></a>在docker-compose.yml所在目录启动docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>如此便可以后台运行<code>mariadb,redis 和adminer</code>了。</p><blockquote><p><strong>如果报错<code>ipv4 ip_forward</code>相关的错误</strong>;</p><p>写入<code>net.ipv4.ip_forward=1</code>到<code>/etc/sysctl.d/ipv4-forward.conf</code>，然后重启就好</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> docker-compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang flutter hover 构建好康的软件</title>
      <link href="/2023/01/08/golang-flutter-hover-%E6%9E%84%E5%BB%BA%E5%A5%BD%E5%BA%B7%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2023/01/08/golang-flutter-hover-%E6%9E%84%E5%BB%BA%E5%A5%BD%E5%BA%B7%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然想弄个GUI的程序玩玩，但想着Gtk和Qt我这种菜鸡估计也整不明白，于是就盯上了flutter; 把UI当成web写这样能简单些，搭配着go-flutter+hover这两个包和golang我就能，前后端都简单的弄出来，还能把弄好的打包成appimage; 因此本文记录一下，从环境到打包出appimage的过程</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="golang-安装"><a href="#golang-安装" class="headerlink" title="golang 安装"></a>golang 安装</h2><p>我用着Archlinux 就直接用包管理器安装了， 毕竟滚动发行版包总是最新的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S go</span><br></pre></td></tr></table></figure><p>设置一下<code>go env</code>, 使得可以使用<code>go mod</code> 和 <code>go get</code> 国内提速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=<span class="string">&quot;auto&quot;</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>在<code>.bashrc</code>或<code>.zshrc</code>添加$GOPATH&#x2F;bin到PATH, 具体加到哪里取决于用户shell是哪个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$HOME</span>/go/bin&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/go/bin&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加完的话，go install 的包就可以之间用了</p><h2 id="flutter安装"><a href="#flutter安装" class="headerlink" title="flutter安装"></a>flutter安装</h2><p>下载压缩包 <a href="https://flutter.cn/docs/development/tools/sdk/releases?tab=linux">https://flutter.cn/docs/development/tools/sdk/releases?tab=linux</a><br>选 Beta channel (Linux)的 hover希望用beta而不是stable</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我直接解压到了家目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line"><span class="comment"># 俺写这篇文章时最新的</span></span><br><span class="line">wget https://storage.flutter-io.cn/flutter_infra_release/releases/beta/linux/flutter_linux_3.7.0-1.1.pre-beta.tar.xz -c -q --show-progress</span><br><span class="line">tar -xvf flutter_linux_3.7.0-1.1.pre-beta.tar.xz</span><br></pre></td></tr></table></figure><p>写到.bashrc或.zshrc, 理由和go的一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$HOME</span>/flutter/bin&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/flutter/bin&quot;</span></span><br><span class="line">  <span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">  <span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>让.bashrc的更改生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.bashrc</span><br></pre></td></tr></table></figure><p>安装二进制开发文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter precache</span><br></pre></td></tr></table></figure><p>要是说flutter有新版就更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter upgrade</span><br></pre></td></tr></table></figure><h2 id="hover-安装"><a href="#hover-安装" class="headerlink" title="hover 安装"></a>hover 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u -a github.com/go-flutter-desktop/hover</span><br><span class="line">go install github.com/go-flutter-desktop/hover</span><br></pre></td></tr></table></figure><p>之后<code>hover</code>的二进制文件就到了<code>$HOME/go/bin</code>里面</p><h1 id="食用"><a href="#食用" class="headerlink" title="食用"></a>食用</h1><h2 id="新建flutter项目"><a href="#新建flutter项目" class="headerlink" title="新建flutter项目"></a>新建flutter项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flutter create xxproject</span><br><span class="line"><span class="comment">#可以运行瞧瞧</span></span><br><span class="line"><span class="comment"># cd xxproject</span></span><br><span class="line"><span class="comment"># flutter run</span></span><br></pre></td></tr></table></figure><h2 id="hover-初始化"><a href="#hover-初始化" class="headerlink" title="hover 初始化"></a>hover 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxproject</span><br><span class="line">hover init xxproject</span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line"><span class="comment">#hover run</span></span><br></pre></td></tr></table></figure><h2 id="编译打包appimage"><a href="#编译打包appimage" class="headerlink" title="编译打包appimage"></a>编译打包appimage</h2><p>配置flutter 允许编译 linux-desktop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --enable-linux-desktop</span><br></pre></td></tr></table></figure><p>安装appimagetool,脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">wget <span class="string">&quot;https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage&quot;</span></span><br><span class="line"> \</span><br><span class="line">        -c -q --show-progress -O appimagetool</span><br><span class="line"><span class="built_in">chmod</span> a+x appimagetool</span><br><span class="line">sudo <span class="built_in">cp</span> appimagetool /usr/local/bin/appimagetool</span><br><span class="line"><span class="built_in">rm</span> appimagetool</span><br></pre></td></tr></table></figure><p>安装好appimagetool后, 生成appimage打包信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxproject</span><br><span class="line">hover init-packaging linux-appimage</span><br></pre></td></tr></table></figure><p>编译生成linux-appimage</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxproject</span><br><span class="line">hover build linux-appimage</span><br></pre></td></tr></table></figure><h3 id="packages-不存在-的错误"><a href="#packages-不存在-的错误" class="headerlink" title=".packages 不存在 的错误"></a>.packages 不存在 的错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录生成.packages</span></span><br><span class="line"><span class="built_in">cd</span> xxproject</span><br><span class="line">vim generate_dot_packages.sh</span><br><span class="line"><span class="built_in">chmod</span> +x generate_dot_packages.sh</span><br><span class="line">./generate_dot_packages.sh</span><br><span class="line"><span class="comment"># 生成完之后重新编译打包</span></span><br><span class="line">hover init-packaging linux-appimage</span><br></pre></td></tr></table></figure><p>generate_dot_packages.sh 的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cp</span> .dart_tool/package_config.json .packages</span><br></pre></td></tr></table></figure><h1 id="执行生成的appimage"><a href="#执行生成的appimage" class="headerlink" title="执行生成的appimage"></a>执行生成的appimage</h1><p>生成的appimage在项目目录的<code>go/build/outputs/linux-appimage-release</code>，这个目录里面</p><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p><img src="https://cdn.basi-a.top/images/images_go-flutter-screenshot.webp" alt="截图"></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> flutter </tag>
            
            <tag> hover </tag>
            
            <tag> go-flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用gnome-keying 让vscode能保持登陆</title>
      <link href="/2023/01/08/%E5%90%AF%E7%94%A8gnome-keying-%E8%AE%A9vscode%E8%83%BD%E4%BF%9D%E6%8C%81%E7%99%BB%E9%99%86/"/>
      <url>/2023/01/08/%E5%90%AF%E7%94%A8gnome-keying-%E8%AE%A9vscode%E8%83%BD%E4%BF%9D%E6%8C%81%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用dwm之类的窗口管理器，之前也没装过gnome这类的桌面环境，在一个新鲜的环境下,vscode 会去使用gnome-keying来存储登陆信息，而又因为环境中没有gnome-keying，所以vscode每次打开都要重新登陆; 因此本文记录一下，我配置gnome-keying，并登陆自启的过程。</p><h1 id="安装gnome-keying"><a href="#安装gnome-keying" class="headerlink" title="安装gnome-keying"></a>安装gnome-keying</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gnome-keyring libsecret</span><br><span class="line"><span class="comment"># libsecret授予其他应用程序访问密钥环的权限</span></span><br></pre></td></tr></table></figure><p>可选的GUI管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S seahorse</span><br></pre></td></tr></table></figure><h1 id="PAM-自动解锁密钥环"><a href="#PAM-自动解锁密钥环" class="headerlink" title="PAM 自动解锁密钥环"></a>PAM 自动解锁密钥环</h1><p>编辑 <code>/etc/pam.d/login</code> 文件，在 <code>auth</code> 部分的末尾添加 <code>auth optional pam_gnome_keyring.so</code>，<br>在 <code>session</code> 末尾添加 <code>session optional pam_gnome_keyring.so auto_start</code></p><blockquote><p>#%PAM-1.0</p><p>auth       required     pam_securetty.so<br>auth       requisite    pam_nologin.so<br>auth       include      system-local-login<br><strong>auth       optional     pam_gnome_keyring.so</strong><br>account    include      system-local-login<br>session    include      system-local-login<br><strong>session    optional     pam_gnome_keyring.so auto_start</strong><br>password   include      system-local-login</p></blockquote><h1 id="让gnome-keyring-secrets等自动启动"><a href="#让gnome-keyring-secrets等自动启动" class="headerlink" title="让gnome-keyring-secrets等自动启动"></a>让gnome-keyring-secrets等自动启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/xdg/autostart/&#123;gnome-keyring-secrets.desktop,gnome-keyring-ssh.desktop&#125; ~/.config/autostart/</span><br><span class="line">sed -i <span class="string">&#x27;/^OnlyShowIn.*$/d&#x27;</span> ~/.config/autostart/gnome-keyring-secrets.desktop</span><br><span class="line">sed -i <span class="string">&#x27;/^OnlyShowIn.*$/d&#x27;</span> ~/.config/autostart/gnome-keyring-ssh.desktop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新版linuxqq 脚本安装AppImage包</title>
      <link href="/2022/12/31/%E6%96%B0%E7%89%88linuxqq-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85AppImage%E5%8C%85/"/>
      <url>/2022/12/31/%E6%96%B0%E7%89%88linuxqq-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85AppImage%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2022年12月30日，官方新版的<a href="https://im.qq.com/linuxqq/index.shtml">linuxqq v3.0.0</a>发布，不用再忍受上古画风的linuxqq了<br>为了方便自己使用中安装更新于是写了个小脚本</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>能sudo提升权限的用户执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DownloadUrl=`curl -s <span class="string">&#x27;https://im.qq.com/rainbow/linuxQQDownload/&#x27;</span> -H <span class="string">&#x27;user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span> | \</span><br><span class="line">grep <span class="string">&quot;x64DownloadUrl&quot;</span> | \</span><br><span class="line">awk -F<span class="string">&quot;\&quot;,\&quot;&quot;</span> <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | \</span><br><span class="line">awk -F<span class="string">&quot;\&quot;:\&quot;&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | \</span><br><span class="line">awk -F<span class="string">&quot;\&quot;&#125;,\&quot;&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;url: <span class="variable">$&#123;DownloadUrl&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;install start&quot;</span></span><br><span class="line">wget <span class="variable">$&#123;DownloadUrl&#125;</span> -c -q --show-progress -O linuxqq</span><br><span class="line"><span class="built_in">chmod</span> +x linuxqq</span><br><span class="line">sudo <span class="built_in">cp</span> linuxqq /usr/local/bin/linuxqq</span><br><span class="line"><span class="built_in">rm</span> linuxqq</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;install done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">install</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>虽然官方发布了deb和rpm包，但我不想看着装上不知道是啥的依赖，所以我更喜欢安装appimage的包，至于什么桌面图标的，我用着dwm也看不见，所以脚本中便没有设置这一项的</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linuxqq </tag>
            
            <tag> AppImage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 脚本安装 Apifox</title>
      <link href="/2022/12/29/linux-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85-Apifox/"/>
      <url>/2022/12/29/linux-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85-Apifox/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了方便自己使用apifox来调试api, 从而写了个shell脚本来在linux上安装appimage版的apifox<br>下载好的appimage包，重命名放到<code>/usr/local/bin</code>下，方便自己通过dmenu打开</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">URL=https://cdn.apifox.cn/download/Apifox-linux-latest.zip</span><br><span class="line">ZIPNAME=Apifox-linux-latest.zip</span><br><span class="line">DIR=Apifox-linux-latest</span><br><span class="line">PKGNAME=Apifox.AppImage</span><br><span class="line"><span class="function"><span class="title">install</span></span>()&#123;</span><br><span class="line">        wget -q <span class="variable">$&#123;URL&#125;</span> --show-progress</span><br><span class="line">        unzip <span class="variable">$&#123;ZIPNAME&#125;</span> -d <span class="variable">$&#123;DIR&#125;</span></span><br><span class="line">        <span class="built_in">chmod</span> +x <span class="variable">$&#123;DIR&#125;</span>/<span class="variable">$&#123;PKGNAME&#125;</span></span><br><span class="line">        sudo <span class="built_in">cp</span> <span class="variable">$&#123;DIR&#125;</span>/<span class="variable">$&#123;PKGNAME&#125;</span> /usr/local/bin/apifox</span><br><span class="line">        <span class="built_in">rm</span> -rf <span class="variable">$&#123;DIR&#125;</span> <span class="variable">$&#123;ZIPNAME&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">        install</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux,shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 zabbix</title>
      <link href="/2022/12/16/centos7-%E5%AE%89%E8%A3%85-zabbix/"/>
      <url>/2022/12/16/centos7-%E5%AE%89%E8%A3%85-zabbix/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是之前做学校实验时我写的zabbix部署脚本</p><h1 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h1><p>网络拓扑很简单，同一局域网的两台机器，一个是zabbix服务端，一个是被监控端</p><table><thead><tr><th>IP地址</th><th>描述</th></tr></thead><tbody><tr><td>192.168.200.222</td><td>zabbix服务端</td></tr><tr><td>192.168.200.111</td><td>部署着其他应用的被监控端</td></tr></tbody></table><h1 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author        : basi-a</span></span><br><span class="line"><span class="comment"># FIlename      : zabbix-server-install.sh</span></span><br><span class="line"><span class="comment"># Description   : zabbix server install script, by install lamp then install zabbix-server</span></span><br><span class="line"><span class="comment"># mariadb root 用户密码</span></span><br><span class="line">MARIADB_ROOT_PASSWD=123456</span><br><span class="line"><span class="comment"># 数据库 zabbix 用户的密码</span></span><br><span class="line">ZABBIX_PASSWORD=basi-a@123</span><br><span class="line"><span class="comment"># 安装LAMP</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">LAMP_install</span></span>()&#123;</span><br><span class="line">    yum -y install httpd \</span><br><span class="line">    mariadb-server mariadb \</span><br><span class="line">    php</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 启动mariadb并初始化</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">mariadb_run</span></span>()&#123;</span><br><span class="line">    systemctl <span class="built_in">enable</span> mariadb &amp;&amp; systemctl start mariadb</span><br><span class="line">    mysqladmin password <span class="variable">$&#123;MARIADB_ROOT_PASSWD&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 启动zabbix-server</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">zabbix_run</span></span>()&#123;</span><br><span class="line">    systemctl start zabbix-server zabbix-agent httpd</span><br><span class="line">    systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent httpd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装zabbix</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">zabbix_install</span></span>()&#123;</span><br><span class="line">    rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">    yum clean all</span><br><span class="line">    yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line">    <span class="comment"># 创建zabbix数据库和zabbix用户</span></span><br><span class="line">    mysql -uroot -p<span class="variable">$&#123;MARIADB_ROOT_PASSWD&#125;</span> -e <span class="string">&quot;create database zabbix character set utf8 collate utf8_bin;&quot;</span></span><br><span class="line">    mysql -uroot -p<span class="variable">$&#123;MARIADB_ROOT_PASSWD&#125;</span> -e <span class="string">&quot;create user zabbix@localhost identified by &#x27;<span class="variable">$&#123;ZABBIX_PASSWORD&#125;</span>&#x27;;&quot;</span></span><br><span class="line">    mysql -uroot -p<span class="variable">$&#123;MARIADB_ROOT_PASSWD&#125;</span> -e <span class="string">&quot;grant all privileges on zabbix.* to zabbix@localhost;&quot;</span></span><br><span class="line">    <span class="comment"># 导入初始数据</span></span><br><span class="line">    zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p<span class="variable">$&#123;ZABBIX_PASSWORD&#125;</span> zabbix</span><br><span class="line">    <span class="comment"># 编辑/etc/zabbix/zabbix_server.conf 写入zabbix数据库密码</span></span><br><span class="line">    sed -i <span class="string">&quot;/^# DBPassword=/a\DBPassword=<span class="variable">$&#123;ZABBIX_PASSWORD&#125;</span>&quot;</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line">    <span class="comment"># 编辑/etc/httpd/conf.d/zabbix.conf 修改时区为亚洲上海</span></span><br><span class="line">    sed -i <span class="string">&quot;s\# php_value date.timezone Europe/Riga\php_value date.timezone Asia/Shanghai\g&quot;</span> /etc/httpd/conf.d/zabbix.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    systemctl <span class="built_in">disable</span> firewalld &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    systemctl stop firewalld &gt;/dev/null 2&gt;1&amp;</span><br><span class="line">    setenforcing 0 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    LAMP_install</span><br><span class="line">    mariadb_run</span><br><span class="line">    zabbix_install</span><br><span class="line">    zabbix_run</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;visit zabbix with http://server&#x27;s_IP/zabbix&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;default username: Admin&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;default password: zabbix&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>之后就访问 http:&#x2F;&#x2F;服务端IP&#x2F;zabbix 安装zabbix<br>然后就可以设置被控端监控项</p><h2 id="被监控端"><a href="#被监控端" class="headerlink" title="被监控端"></a>被监控端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author        : basi-a</span></span><br><span class="line"><span class="comment"># FIlename      : zabbix-client-install.sh</span></span><br><span class="line"><span class="comment"># Description   : zabbix client install script, by install zabbix-agent</span></span><br><span class="line">ZABBIX_SERVER=192.168.200.222</span><br><span class="line">CLIENT_HOSTNAME=192.168.200.111</span><br><span class="line"><span class="comment"># 安装zabbix</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">zabbix_client_install</span></span>()&#123;</span><br><span class="line">    rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">    yum clean all</span><br><span class="line">    yum -y install zabbix-agent</span><br><span class="line">    <span class="comment"># 编辑/etc/zabbix/zabbix_agentd.conf 指定zabbix-server和本机hostname</span></span><br><span class="line">    sed -i <span class="string">&quot;s\Server=127.0.0.1\Server=<span class="variable">$&#123;ZABBIX_SERVER&#125;</span>\g&quot;</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">    sed -i <span class="string">&quot;s\ServerActive=127.0.0.1\ServerActive=<span class="variable">$&#123;ZABBIX_SERVER&#125;</span>\g&quot;</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">    sed -i <span class="string">&quot;s\Hostname=Zabbix server\Hostname=<span class="variable">$&#123;CLIENT_HOSTNAME&#125;</span>\g&quot;</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 启动zabbix-agent</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">zabbix_client_run</span></span>()&#123;</span><br><span class="line">    systemctl <span class="built_in">enable</span> zabbix-agent &amp;&amp; systemctl start zabbix-agent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    zabbix_client_install</span><br><span class="line">    zabbix_client_run</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;zabbix client is OK, you can add it on zabbix server&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>被控端, 安装好zabbix-agent, zabbix-server就能进行监控了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> centos </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2 使用windows的代理</title>
      <link href="/2022/12/15/wsl2-%E4%BD%BF%E7%94%A8windows%E7%9A%84%E4%BB%A3%E7%90%86/"/>
      <url>/2022/12/15/wsl2-%E4%BD%BF%E7%94%A8windows%E7%9A%84%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="新增wsl入站规则"><a href="#新增wsl入站规则" class="headerlink" title="新增wsl入站规则"></a>新增wsl入站规则</h1><p>打开powershell(管理员)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound  -InterfaceAlias &quot;vEthernet (WSL)&quot;  -Action Allow</span><br></pre></td></tr></table></figure><p>之后就不用管是否wsl能ping通windows了，因为windows默认关闭ICMP回显，除非到防火墙处开启</p><h1 id="脚本设置代理地址及端口"><a href="#脚本设置代理地址及端口" class="headerlink" title="脚本设置代理地址及端口"></a>脚本设置代理地址及端口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># script-name: proxy-set.sh</span></span><br><span class="line"><span class="comment"># 获取网关地址</span></span><br><span class="line">host_ip=<span class="string">&quot;`ip route | grep &quot;</span>default<span class="string">&quot; | awk &#x27;&#123;print <span class="variable">$3</span>&#125;&#x27;`&quot;</span></span><br><span class="line"><span class="comment"># 代理工具的端口</span></span><br><span class="line"><span class="comment"># v2raya port</span></span><br><span class="line">socks5_port=<span class="string">&quot;20170&quot;</span></span><br><span class="line">http_port=<span class="string">&quot;20171&quot;</span></span><br><span class="line"><span class="comment"># 设置代理环境变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>()&#123;</span><br><span class="line">    <span class="built_in">export</span> ALL_PROXY=socks5://<span class="variable">$&#123;host_ip&#125;</span>:<span class="variable">$&#123;socks5_port&#125;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=http://<span class="variable">$&#123;host_ip&#125;</span>:<span class="variable">$&#123;http_port&#125;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=http://<span class="variable">$&#123;host_ip&#125;</span>:<span class="variable">$&#123;http_port&#125;</span></span><br><span class="line">    <span class="built_in">export</span> ftp_proxy=http://<span class="variable">$&#123;host_ip&#125;</span>:<span class="variable">$&#123;http_port&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 删除代理环境变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> ALL_PROXY</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p>进入wsl<br>如果你用的是 zsh 而不是 bash 的话就是写入到 <code>.zshrc</code> 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source proxy-set.sh&quot;</span> &gt;&gt; .bashrc</span><br></pre></td></tr></table></figure><p>然后重新打开 wsl; 或者直接 <code>source proxy-set.sh</code> ，然后使用以下命令，不过重启的话就不用再source一遍了, 因为用户 shell 是 bash，每次登录都会读取一遍<code>.bashrc</code>, 执行里面的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启代理，不过前提是windows那边的代理工具开启了端口分享</span></span><br><span class="line">proxy_on</span><br><span class="line"><span class="comment"># 关闭代理</span></span><br><span class="line">proxy_off</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> wsl2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> wsl2 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian 安装最新 fastfetch</title>
      <link href="/2022/12/13/debian-%E5%AE%89%E8%A3%85-fastfetch/"/>
      <url>/2022/12/13/debian-%E5%AE%89%E8%A3%85-fastfetch/</url>
      
        <content type="html"><![CDATA[<h1 id="debian-安装-fastfetch"><a href="#debian-安装-fastfetch" class="headerlink" title="debian 安装 fastfetch"></a>debian 安装 fastfetch</h1><blockquote><p>我的wsl里面是debian， 虽然debian源里面有neofetch，但在我的机器上总是会卡一下，这是我无法忍受的。</p></blockquote><blockquote><p>然后我想起了C写的fastfetch，应该会更快， 之前在archlinux上面倒是很方便 ，直接 <code>pacman -S fastfetch</code> 就安装上了，但debian源里面也没有，手动安装若是想满足我的更新欲望，就只能经常从github下载release然后安装，这依然是我无法忍受的。</p></blockquote><blockquote><p>于是我写了两个脚本，自动获取最新的release，并安装，或者更新。</p></blockquote><h1 id="安装、更新最新版fastfetch的shell脚本"><a href="#安装、更新最新版fastfetch的shell脚本" class="headerlink" title="安装、更新最新版fastfetch的shell脚本"></a>安装、更新最新版fastfetch的shell脚本</h1><p>下载最新release</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># script_name: get-release-latest.sh</span></span><br><span class="line">tag_name=<span class="string">&quot;`wget -qO- -t1 -T2 &quot;</span>https://api.github.com/repos/<span class="variable">$&#123;project_name&#125;</span>/releases/latest<span class="string">&quot; | jq -r &#x27;.tag_name&#x27;`&quot;</span></span><br><span class="line">release_name=<span class="string">&quot;`wget -qO- -t1 -T2 &quot;</span>https://api.github.com/repos/<span class="variable">$&#123;project_name&#125;</span>/releases/latest<span class="string">&quot; | jq -r &#x27;.assets[].name&#x27; | grep &quot;</span>.deb<span class="string">&quot;`&quot;</span></span><br><span class="line">release_url=<span class="string">&quot;https://github.com/<span class="variable">$&#123;project_name&#125;</span>/releases/download/<span class="variable">$&#123;tag_name&#125;</span>/<span class="variable">$&#123;release_name&#125;</span>&quot;</span></span><br><span class="line">wget -c <span class="variable">$&#123;release_url&#125;</span> -q --show-progress</span><br></pre></td></tr></table></figure><p>安装deb包，安装后删除deb包<br><strong>此脚本只对安装deb包起作用！！！其他的，自行修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># script_name: fastfetch-install.sh</span></span><br><span class="line">project_name=<span class="string">&quot;LinusDierheimer/fastfetch&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;installing <span class="variable">$&#123;project_name&#125;</span> ......&quot;</span></span><br><span class="line"><span class="built_in">source</span> ./get-release-latest.sh</span><br><span class="line"><span class="keyword">if</span> [ `<span class="built_in">whoami</span>` != <span class="string">&#x27;root&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">        sudo dpkg -i <span class="variable">$&#123;release_name&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        dpkg -i <span class="variable">$&#123;release_name&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$&#123;release_name&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;install done&quot;</span></span><br></pre></td></tr></table></figure><h1 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h1><p>给fastfetch-install.sh个可执行权限，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x fastfetch-install.sh</span><br><span class="line">./fastfetch-install.sh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># bash fastfetch-install.sh</span></span><br></pre></td></tr></table></figure><p>到这就安装完了</p><hr><p>想再安装点别的，复制fastfetch-install.sh到新的脚本，然后改掉project_name，执行新的脚本就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> fastfetch-install.sh fastgithub-install.sh</span><br><span class="line">sed -i <span class="string">&quot;s\project_name=&quot;</span>LinusDierheimer/fastfetch<span class="string">&quot;\project_name=&quot;</span>dotnetcore/FastGithub<span class="string">&quot;\g&quot;</span> fastgithub-install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x fastgithub-install.sh</span><br><span class="line">./fastgithub-install.sh</span><br></pre></td></tr></table></figure><p>想一起安装或更新还可以这么弄, 弄个脚本来执行俩安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./fastfetch-install.sh&quot;</span> &gt; two-install.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./fastgithub-install.sh&quot;</span> &gt;&gt; two-install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x two-install.sh</span><br><span class="line">./two-install.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> debian </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> debian </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个交叉编译GO的小脚本</title>
      <link href="/2022/08/06/%E4%B8%80%E4%B8%AA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91GO%E7%9A%84%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/08/06/%E4%B8%80%E4%B8%AA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91GO%E7%9A%84%E5%B0%8F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="所谓交叉编译"><a href="#所谓交叉编译" class="headerlink" title="所谓交叉编译"></a>所谓交叉编译</h1><blockquote><p>所谓交叉编译，就是在一个平台上去编译出其他操作系统和CPU架构的二进制文件供其他环境使用。比如linux下写出的玩意想编译完能在win上用，这就是交叉编译。</p></blockquote><blockquote><p>最近在看GO的基础，突然想把在linux上用GO写出来的玩意，弄到win上用，于是有了这么个小脚本，虽然没啥大用(╯‵□′)╯︵┻━┻</p></blockquote><h1 id="垃圾脚本"><a href="#垃圾脚本" class="headerlink" title="垃圾脚本"></a>垃圾脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">selectOS</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Please select the target OS&quot;</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;1. windows, 2. linux, 3. freebsd, 4. darwin&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Target OS &gt; &quot;</span> os</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$os</span> <span class="keyword">in</span></span><br><span class="line">        1) <span class="built_in">echo</span> <span class="string">&quot;selected windows&quot;</span></span><br><span class="line">        target_os=windows</span><br><span class="line">        ;;</span><br><span class="line">        2) <span class="built_in">echo</span> <span class="string">&quot;selected linux&quot;</span></span><br><span class="line">        target_os=linux</span><br><span class="line">        ;;</span><br><span class="line">        3) <span class="built_in">echo</span> <span class="string">&quot;selected freebsd&quot;</span></span><br><span class="line">        target_os=freebsd</span><br><span class="line">        ;;</span><br><span class="line">         4) <span class="built_in">echo</span> <span class="string">&quot;selected darwin&quot;</span></span><br><span class="line">        target_os=darwin</span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;A wrong input !!!&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">selectArch</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Please select the target CPU architecture&quot;</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;1. amd64, 2. arm, 3. 386&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Target CPU ARCH &gt; &quot;</span> <span class="built_in">arch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$arch</span> <span class="keyword">in</span></span><br><span class="line">        1) <span class="built_in">echo</span> <span class="string">&quot;selected amd64&quot;</span></span><br><span class="line">        target_arch=amd64</span><br><span class="line">        ;;</span><br><span class="line">        2) <span class="built_in">echo</span> <span class="string">&quot;selected arm&quot;</span></span><br><span class="line">        target_arch=arm</span><br><span class="line">        ;;</span><br><span class="line">        3) <span class="built_in">echo</span> <span class="string">&quot;selected 386&quot;</span></span><br><span class="line">        target_arch=386</span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;A wrong input !!!&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">inputOutputname</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Please input the output name &quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Outputname &gt; &quot;</span> outputname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">startBuild</span></span>()&#123;</span><br><span class="line">    <span class="built_in">enable</span>=0</span><br><span class="line">    CGO_ENABLED=<span class="variable">$enable</span> GOOS=<span class="variable">$target_os</span> GOARCH=<span class="variable">$target_arch</span> go build -o <span class="variable">$outputname</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">    selectOS</span><br><span class="line">    selectArch</span><br><span class="line">    inputOutputname</span><br><span class="line">    startBuild</span><br><span class="line">&#125;</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://raw.githubusercontent.com/basi-a/GoCrossCompilation/main/HowToUse.png" alt="效果"><br>github 仓库 <a href="https://github.com/basi-a/GoCrossCompilation">https://github.com/basi-a/GoCrossCompilation</a><br>gitee 仓库 <a href="https://gitee.com/basi-a/GoCrossCompilation">https://gitee.com/basi-a/GoCrossCompilation</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arandr --不懂xrandr 参数的救星</title>
      <link href="/2022/07/03/Arandr-%E4%B8%8D%E6%87%82xrandr-%E5%8F%82%E6%95%B0%E7%9A%84%E6%95%91%E6%98%9F/"/>
      <url>/2022/07/03/Arandr-%E4%B8%8D%E6%87%82xrandr-%E5%8F%82%E6%95%B0%E7%9A%84%E6%95%91%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="新增显示器"><a href="#新增显示器" class="headerlink" title="新增显示器"></a>新增显示器</h1><blockquote><p>一直以来我的 Archlinux 一直使用着 <code>dwm</code> 窗口管理器，也没用完整的桌面环境。<br>最近把家里旧显示器给翻出来了，接到我的本子上之后就按默认复制我的主显示器。但正经人谁副屏是不用来扩展屏幕的，于是我便开始想办法改设置，要是用的像kde这种完整的de 我也就不用发愁了，毕竟设置里的功能十分完善,可我用着简陋的dwm，整个dwm都是我自己打补丁编译安装的，想改设置就只能写配置文件，或者用命令了。</p></blockquote><h1 id="Arandr-设置多显示器输出"><a href="#Arandr-设置多显示器输出" class="headerlink" title="Arandr 设置多显示器输出"></a>Arandr 设置多显示器输出</h1><blockquote><p>网络上翻了半天，结果都是用 <code>xrandr</code> 这一命令来控制双显示器的输出，可参数我实在看不懂。<br>最后回到了万能的 <code>archwiki</code> ,结果发现了 <code>Arandr</code> 这个好用的图形化工具。<br>这个工具可以用鼠标拖拽来修改副显示器的用途，并且还可以将设置保存成shell 脚本 。<br>这一功能可太好用了：打开脚本一看还是调用的 <code>xrandr</code> ，于是我就把这脚本里的命令直接给复制到我dwm的开机自启脚本 <code>~/.dwm/autostart.sh</code> 里了。</p></blockquote><h1 id="我的-suckless-全家桶"><a href="#我的-suckless-全家桶" class="headerlink" title="我的 suckless 全家桶"></a>我的 suckless 全家桶</h1><blockquote><p>既然提到了 <code>dwm</code> 那我就再此贴一下我的suckless全家桶的git仓库吧 ヾ(≧▽≦*)o<br><a href="https://gitee.com/basi-a/my_dwm">https://gitee.com/basi-a/my_dwm</a><br><a href="https://gitee.com/basi-a/my_st">https://gitee.com/basi-a/my_st</a><br><a href="https://gitee.com/basi-a/my_slock">https://gitee.com/basi-a/my_slock</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dwm </tag>
            
            <tag> suckless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ns3 netanim 可视化</title>
      <link href="/2022/06/21/ns3-netanim-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/06/21/ns3-netanim-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><code>ns3 版本 3.36.1</code></p><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ns3/netanim-module.h&quot;</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function">AnimationInterface <span class="title">anim</span><span class="params">(<span class="string">&quot;xxx.xml&quot;</span>)</span></span>; <span class="comment">//生成的xml文件的名字</span></span><br><span class="line">  Simulator::<span class="built_in">Run</span> ();</span><br><span class="line">  Simulator::<span class="built_in">Destroy</span> ();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/ns3/ns-allinone-3.36.1/ns-3.36.1 $ ./ns3 run scratch/myfirst.cc</span><br></pre></td></tr></table></figure><h1 id="用NetAnim-打开xml文件"><a href="#用NetAnim-打开xml文件" class="headerlink" title="用NetAnim 打开xml文件"></a>用NetAnim 打开xml文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/ns3/ns-allinone-3.36.1/netanim-3.108 $ ./NetAnim</span><br></pre></td></tr></table></figure><p>打开NetAnim后打开生成的xml文件，就可以看见自己创建的节点了</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ns3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置交换文件</title>
      <link href="/2022/03/02/%E8%AE%BE%E7%BD%AE%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/02/%E8%AE%BE%E7%BD%AE%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天用htop看内存占用，突然发现swap是0, 虽然内存够大，但实在不能忍，于是我就新建了4G的swapfile</p><h1 id="创建swapfile，用于swap"><a href="#创建swapfile，用于swap" class="headerlink" title="创建swapfile，用于swap"></a>创建swapfile，用于swap</h1><h2 id="用dd创建一个指定大小的交换文件"><a href="#用dd创建一个指定大小的交换文件" class="headerlink" title="用dd创建一个指定大小的交换文件"></a>用dd创建一个指定大小的交换文件</h2><p>如 创建4G大小的交换文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> /swap</span><br><span class="line">$ sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swap/swapfile bs=1M count=4096 status=progress</span><br></pre></td></tr></table></figure><h2 id="为交换文件设置权限"><a href="#为交换文件设置权限" class="headerlink" title="为交换文件设置权限"></a>为交换文件设置权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">chmod</span> 600 /swap/swapfile </span><br></pre></td></tr></table></figure><h2 id="格式化，用于交换文件"><a href="#格式化，用于交换文件" class="headerlink" title="格式化，用于交换文件"></a>格式化，用于交换文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkswap /swap/swapfile</span><br></pre></td></tr></table></figure><h2 id="启用交换文件"><a href="#启用交换文件" class="headerlink" title="启用交换文件"></a>启用交换文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo swapon /swap/swapfile</span><br></pre></td></tr></table></figure><h2 id="最后编辑-x2F-etc-x2F-fstab-添加下面一条给交换文件"><a href="#最后编辑-x2F-etc-x2F-fstab-添加下面一条给交换文件" class="headerlink" title="最后编辑&#x2F;etc&#x2F;fstab,添加下面一条给交换文件"></a>最后编辑&#x2F;etc&#x2F;fstab,添加下面一条给交换文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/fstab</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;swap&#x2F;swapfile none swap defaults 0 0</p></blockquote><p>之后重启就可以了</p><h1 id="删除swapfile"><a href="#删除swapfile" class="headerlink" title="删除swapfile"></a>删除swapfile</h1><h2 id="关闭交换文件"><a href="#关闭交换文件" class="headerlink" title="关闭交换文件"></a>关闭交换文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo swapoff /swap/swapfile</span><br></pre></td></tr></table></figure><p>关闭后就可以，删除交换文件，然后再做重新调整之类的</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> swapfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch 用debtap 安装 deb包</title>
      <link href="/2022/02/27/Arch-%E7%94%A8debtap-%E5%AE%89%E8%A3%85-deb%E5%8C%85/"/>
      <url>/2022/02/27/Arch-%E7%94%A8debtap-%E5%AE%89%E8%A3%85-deb%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装debtap"><a href="#安装debtap" class="headerlink" title="安装debtap"></a>安装debtap</h1><blockquote><p>paru -S debtap</p></blockquote><h2 id="更新debtap的数据库"><a href="#更新debtap的数据库" class="headerlink" title="更新debtap的数据库"></a>更新debtap的数据库</h2><blockquote><p>sudo debtap -u</p></blockquote><p><em>国内会非常的慢，不过由于 debtap 的 bin 文件是个 shell 脚本，所以改改脚本就行</em></p><blockquote><p>sudo vim &#x2F;bin&#x2F;debtap</p></blockquote><p>把脚本里面的 debian 源和 ubuntu源换成 国内镜像源就行了</p><p>如：把脚本里 <code>http://ftp.debian.org/</code> 和 <code>http://archive.ubuntu.com/</code> 都换成 <code>https://mirrors.ustc.edu.cn/</code></p><h2 id="使用debtap转换deb包"><a href="#使用debtap转换deb包" class="headerlink" title="使用debtap转换deb包"></a>使用debtap转换deb包</h2><blockquote><p>debtap xxx.deb</p></blockquote><p>按照提示输入包名，license。包名自己起，license 填GPL之类的，完成后会在 deb 包相同目录下生成 pacman 可安装的包， 如<code>xxx.pkg.tar.zst</code></p><h1 id="用pacman安装"><a href="#用pacman安装" class="headerlink" title="用pacman安装"></a>用pacman安装</h1><blockquote><p>sudo pacman -U xxx.tar.zst</p></blockquote><p>安装好的包，和自己起的包名是一样的</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch的双显卡驱动</title>
      <link href="/2022/02/09/Arch%E7%9A%84%E5%8F%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/02/09/Arch%E7%9A%84%E5%8F%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Arch-的双显卡驱动-xorg"><a href="#Arch-的双显卡驱动-xorg" class="headerlink" title="Arch 的双显卡驱动 (xorg)"></a>Arch 的双显卡驱动 (xorg)</h1><p><strong>注意 ：本文两种方案二选一 ！！</strong></p><h1 id="optimus-manager-方案"><a href="#optimus-manager-方案" class="headerlink" title="optimus manager 方案"></a>optimus manager 方案</h1><h2 id="I卡驱动"><a href="#I卡驱动" class="headerlink" title="I卡驱动"></a>I卡驱动</h2><p>不用装intel的驱动，直接用mesa的就行</p><h2 id="N卡驱动"><a href="#N卡驱动" class="headerlink" title="N卡驱动"></a>N卡驱动</h2><p>编辑 <code>pacman.conf</code> 开启 32位软件源（multilib）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>删掉这两行的注释</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>##同步软件包数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><p>##安装Nvidia显卡闭源驱动 (非自定义内核)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nvidia nvidia-prime nvidia-settings nvidia-utils opencl-nvidia lib32-nvidia-utils lib32-opencl-nvidia</span><br></pre></td></tr></table></figure><h2 id="双显卡驱动切换工具"><a href="#双显卡驱动切换工具" class="headerlink" title="双显卡驱动切换工具"></a>双显卡驱动切换工具</h2><p>使用的是 <code>optimus-manager</code> + <code>bbswitch</code></p><p>安装optimus-manager 和 bbswitch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S optimus-manager bbswitch</span><br></pre></td></tr></table></figure><h3 id="图形化切换工具"><a href="#图形化切换工具" class="headerlink" title="图形化切换工具"></a>图形化切换工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paru -S optimus-manager-qt</span><br></pre></td></tr></table></figure><p>不用这个可以复制github上optimus-manager作者给的的配置，自己填写</p><hr><p>当使用dwm 且直接用startx时，需要在<code>～/.xinitrc</code> 中加上 </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/prime-offload &amp;</span><br></pre></td></tr></table></figure><p>另外还要保证logout时，<code>/usr/bin/prime-switch</code> 以root执行</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimus-manager --switch Nvidia</span><br><span class="line">optimus-manager --switch integrated</span><br><span class="line">optimus-manager --<span class="built_in">print</span> mode</span><br></pre></td></tr></table></figure><p>以上分别是切换N卡，I卡，以及查看当前显卡模式</p><hr><h1 id="PRIME-方案"><a href="#PRIME-方案" class="headerlink" title="PRIME 方案"></a>PRIME 方案</h1><h2 id="双卡驱动同-optimus-方案"><a href="#双卡驱动同-optimus-方案" class="headerlink" title="双卡驱动同 optimus 方案"></a>双卡驱动同 <code>optimus</code> 方案</h2><p>一般来说，装完驱动，不用配置啥，直接<code>prime-run xxx</code>启动想用N卡的程序就行；<br>但也可以&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;nvidia.conf里面显式的配置一下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;ServerLayout&quot;</span><br><span class="line">  Identifier &quot;layout&quot;</span><br><span class="line">  Screen 0 &quot;iGPU&quot;</span><br><span class="line">  Option &quot;AllowNVIDIAGPUScreens&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line">  Identifier &quot;iGPU&quot;</span><br><span class="line">  Driver &quot;modesetting&quot;</span><br><span class="line">  BusID &quot;PCI:0:2:0&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">  Identifier &quot;iGPU&quot;</span><br><span class="line">  Device &quot;iGPU&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line">  Identifier &quot;dGPU&quot;</span><br><span class="line">  Driver &quot;nvidia&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><p>下面的不配也行</p><h2 id="添加N卡配置文件"><a href="#添加N卡配置文件" class="headerlink" title="添加N卡配置文件"></a>添加N卡配置文件</h2><blockquote><p>对于在 Intel Coffee Lake 或更高版本 CPU 以及某些 Ryzen CPU（如 5800H）平台上运行的图灵显卡，可以 在不使用的时候完全关闭 GPU。需要以下 udev 规则：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/udev/rules.d/80-nvidia-pm.rules</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind</span><br><span class="line">ACTION==&quot;bind&quot;, SUBSYSTEM==&quot;pci&quot;, ATTR&#123;vendor&#125;==&quot;0x10de&quot;, ATTR&#123;class&#125;==&quot;0x030000&quot;, TEST==&quot;power/control&quot;, ATTR&#123;power/control&#125;=&quot;auto&quot;</span><br><span class="line">ACTION==&quot;bind&quot;, SUBSYSTEM==&quot;pci&quot;, ATTR&#123;vendor&#125;==&quot;0x10de&quot;, ATTR&#123;class&#125;==&quot;0x030200&quot;, TEST==&quot;power/control&quot;, ATTR&#123;power/control&#125;=&quot;auto&quot;</span><br><span class="line"></span><br><span class="line"># Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind</span><br><span class="line">ACTION==&quot;unbind&quot;, SUBSYSTEM==&quot;pci&quot;, ATTR&#123;vendor&#125;==&quot;0x10de&quot;, ATTR&#123;class&#125;==&quot;0x030000&quot;, TEST==&quot;power/control&quot;, ATTR&#123;power/control&#125;=&quot;on&quot;</span><br><span class="line">ACTION==&quot;unbind&quot;, SUBSYSTEM==&quot;pci&quot;, ATTR&#123;vendor&#125;==&quot;0x10de&quot;, ATTR&#123;class&#125;==&quot;0x030200&quot;, TEST==&quot;power/control&quot;, ATTR&#123;power/control&#125;=&quot;on&quot;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/modprobe.d/nvidia-pm.conf </span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options nvidia &quot;NVreg_DynamicPowerManagement=0x02&quot;</span><br></pre></td></tr></table></figure><p>然后开启 nvidia-persistenced.service </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nvidia-persistenced.service</span><br></pre></td></tr></table></figure><blockquote><p>来自archwiki的说法：<br>我们还需要启用nvidia-persistenced.service服务以避免内核在 NVIDIA 设备资源不再使用时清空设备状态。</p></blockquote><p>其他的配置像<code>反向prime</code>我用不到，看<a href="https://wiki.archlinux.org/title/PRIME">archwiki</a>吧</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux的安装</title>
      <link href="/2022/01/15/ArchLinux%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2022/01/15/ArchLinux%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>按照 archwiki 安装</p><h1 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h1><ul><li>一个烧录好archiso的 U盘</li><li>独立的空硬盘</li><li>一台支持UEFI的电脑(虚拟机也行，开启UEFI模式)</li><li>脑子，手</li></ul><h1 id="验证引导模式，以及连接网络"><a href="#验证引导模式，以及连接网络" class="headerlink" title="验证引导模式，以及连接网络"></a>验证引导模式，以及连接网络</h1><h2 id="验证引导模式"><a href="#验证引导模式" class="headerlink" title="验证引导模式"></a>验证引导模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><blockquote><p>如果命令结果显示了目录且没有报告错误，则系统以 UEFI 模式引导。如果目录不存在就是BIOS模式</p></blockquote><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><h3 id="有线连接或虚拟机"><a href="#有线连接或虚拟机" class="headerlink" title="有线连接或虚拟机"></a>有线连接或虚拟机</h3><p>不用管网络问题直接下一步（DHCP自动分配IP地址）</p><h3 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h3><p>使用 <code>iwctl</code> 连接网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iwctl</span><br><span class="line">[iwd]<span class="comment"># device list //列出无线网卡名称</span></span><br><span class="line">[iwd]<span class="comment"># station device scan //device 写网卡名称</span></span><br><span class="line">[iwd]<span class="comment"># station device get-networks //列出可连接wifw</span></span><br><span class="line">[iwd]<span class="comment"># station device connect SSID //SSID wifi名称</span></span><br></pre></td></tr></table></figure><h1 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h1><p>保证系统时间的准确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h1><p>查看硬盘名称， 如：<code>/dev/sda</code>  <code>/dev/nvme0n1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>使用 <code>cfdisk</code> 对硬盘进行分区 以 <code>/dev/sda</code> 为例</p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>&#x2F;mnt&#x2F;boot&#x2F;efi</td><td>&#x2F;dev&#x2F;sda1</td><td>efi 系统分区</td><td>至少260M</td></tr><tr><td>[SWAP]</td><td>&#x2F;dev&#x2F;sda2</td><td>LInux swap （交换空间）</td><td>大于512M</td></tr><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;sda3</td><td>Linux x86_64 根目录 （&#x2F;）</td><td>剩余空间</td></tr></tbody></table><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><h3 id="x2F-dev-x2F-sda3"><a href="#x2F-dev-x2F-sda3" class="headerlink" title="&#x2F;dev&#x2F;sda3"></a>&#x2F;dev&#x2F;sda3</h3><p>根分区建立ext4 文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure><h3 id="x2F-dev-x2F-sda1"><a href="#x2F-dev-x2F-sda1" class="headerlink" title="&#x2F;dev&#x2F;sda1"></a>&#x2F;dev&#x2F;sda1</h3><p>将efi分区格式化为 fat32</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F 32 /dev/sda1</span><br></pre></td></tr></table></figure><h3 id="x2F-dev-x2F-sda2"><a href="#x2F-dev-x2F-sda2" class="headerlink" title="&#x2F;dev&#x2F;sda2"></a>&#x2F;dev&#x2F;sda2</h3><p>格式化 swap 分区，并启动swap 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sda2</span><br><span class="line">swapon /dev/sda2</span><br></pre></td></tr></table></figure><h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/boot/efi</span><br><span class="line">mount /dev/sda1 /mnt/boot/efi</span><br></pre></td></tr></table></figure><h1 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h1><p>根据下载速度进行排序，并筛选出前 20 个最近同步的国内镜像，最后将结果覆写到 <code>/etc/pacman.d/mirrorlist</code> 文件内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reflector --country China --verbose --latest 20 --<span class="built_in">sort</span> rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><h1 id="安装必须的软件包"><a href="#安装必须的软件包" class="headerlink" title="安装必须的软件包"></a>安装必须的软件包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware vi vim networkmanager dhcpcd</span><br></pre></td></tr></table></figure><h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h1 id="chroot-到新系统"><a href="#chroot-到新系统" class="headerlink" title="chroot 到新系统"></a>chroot 到新系统</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>设置时区 (上海时区)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>编辑 <code>/etc/locale.gen</code>，然后取消掉 <code>en_US.UTF-8 UTF-8</code> 和其他需要的地区前的注释（#）。</p><p>接着执行 <code>locale-gen</code> 以生成 locale 信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p>然后创建 locale.conf文件，并编辑设定 LANG 变量</p><p><code>/etc/locale.conf</code></p><p>写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>创建 <code>hostname</code> 文件</p><p><code>/etc/hostname</code></p><p>写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myhostname <span class="comment">#主机名</span></span><br></pre></td></tr></table></figure><p>添加对应信息到 <code>hosts</code></p><p><code>/ect/hosts</code></p><p>写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1  localhost</span><br><span class="line">127.0.1.1myhostname.localdomain myhostname <span class="comment">#主机名.本地域名 主机名</span></span><br></pre></td></tr></table></figure><h3 id="设置NetworkManager-和dhcpcd-开机启动"><a href="#设置NetworkManager-和dhcpcd-开机启动" class="headerlink" title="设置NetworkManager 和dhcpcd 开机启动"></a>设置NetworkManager 和dhcpcd 开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> NetworkManager &amp;&amp; systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure><h2 id="root密码"><a href="#root密码" class="headerlink" title="root密码"></a>root密码</h2><p>设置root密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="安装引导程序"><a href="#安装引导程序" class="headerlink" title="安装引导程序"></a>安装引导程序</h2><h3 id="微码"><a href="#微码" class="headerlink" title="微码"></a>微码</h3><p>如果有AMD或intel的CPU要安装微码</p><p>对于 AMD 处理器，安装 <code>amd-ucode</code></p><p>对于 Intel 处理器，安装 <code>intel-ucode</code></p><p>如果你在一个移动介质上安装Arch Linux，需要应该安装以上两个厂商处理器的微码软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S intel-ucode <span class="comment"># AMD的CPU就是 amd-ucode</span></span><br></pre></td></tr></table></figure><h3 id="安装GRUB"><a href="#安装GRUB" class="headerlink" title="安装GRUB"></a>安装GRUB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br></pre></td></tr></table></figure><h4 id="安装引导程序-1"><a href="#安装引导程序-1" class="headerlink" title="安装引导程序"></a>安装引导程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Arch</span><br></pre></td></tr></table></figure><h4 id="生成引导文件"><a href="#生成引导文件" class="headerlink" title="生成引导文件"></a>生成引导文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>输入 <code>exit</code> 或 按 <code>ctrl+D</code> 退出chroot环境 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><hr><p>到此，arch安装完成，可以进tty了，另外无线网络可以使用<code>nmtui</code>重新连接</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
